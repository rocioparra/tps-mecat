
mpu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005390  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005528  08005528  00015528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005568  08005568  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005568  08005568  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005568  08005568  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005568  08005568  00015568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800556c  0800556c  0001556c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000078  080055e8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  080055e8  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa48  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ea5  00000000  00000000  0002faf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec8  00000000  00000000  00031998  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd0  00000000  00000000  00032860  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001dea3  00000000  00000000  00033630  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b7e0  00000000  00000000  000514d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b1af2  00000000  00000000  0005ccb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010e7a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041b8  00000000  00000000  0010e820  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005510 	.word	0x08005510

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	08005510 	.word	0x08005510

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <filterUpdate>:
float invSqrt(float x);
void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az);


void filterUpdate(float * d, float * q)
{
 8000b50:	b5b0      	push	{r4, r5, r7, lr}
 8000b52:	b0a2      	sub	sp, #136	; 0x88
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
	float a_x = d[0], a_y = d[1], a_z = d[2];
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	67fb      	str	r3, [r7, #124]	; 0x7c
	float w_x = d[3]*PI/180.0, w_y = d[4]*PI/180.0, w_z = d[5]*PI/180.0;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	330c      	adds	r3, #12
 8000b74:	edd3 7a00 	vldr	s15, [r3]
 8000b78:	ed9f 7ad8 	vldr	s14, [pc, #864]	; 8000edc <filterUpdate+0x38c>
 8000b7c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b80:	eddf 6ad7 	vldr	s13, [pc, #860]	; 8000ee0 <filterUpdate+0x390>
 8000b84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b88:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3310      	adds	r3, #16
 8000b90:	edd3 7a00 	vldr	s15, [r3]
 8000b94:	ed9f 7ad1 	vldr	s14, [pc, #836]	; 8000edc <filterUpdate+0x38c>
 8000b98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b9c:	eddf 6ad0 	vldr	s13, [pc, #832]	; 8000ee0 <filterUpdate+0x390>
 8000ba0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ba4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3314      	adds	r3, #20
 8000bac:	edd3 7a00 	vldr	s15, [r3]
 8000bb0:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8000edc <filterUpdate+0x38c>
 8000bb4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000bb8:	eddf 6ac9 	vldr	s13, [pc, #804]	; 8000ee0 <filterUpdate+0x390>
 8000bbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bc0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float f_1, f_2, f_3; // objective function elements
	float J_11or24, J_12or23, J_13or22, J_14or21, J_32, J_33; // objective function Jacobian elements
	float SEqHatDot_1, SEqHatDot_2, SEqHatDot_3, SEqHatDot_4; // estimated direction of the gyroscope error

	// Auxiliary variables to avoid repeated calculations
	float halfSEq_1 = 0.5f * SEq_1;
 8000bc4:	4bc7      	ldr	r3, [pc, #796]	; (8000ee4 <filterUpdate+0x394>)
 8000bc6:	edd3 7a00 	vldr	s15, [r3]
 8000bca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000bce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bd2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float halfSEq_2 = 0.5f * SEq_2;
 8000bd6:	4bc4      	ldr	r3, [pc, #784]	; (8000ee8 <filterUpdate+0x398>)
 8000bd8:	edd3 7a00 	vldr	s15, [r3]
 8000bdc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000be0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000be4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float halfSEq_3 = 0.5f * SEq_3;
 8000be8:	4bc0      	ldr	r3, [pc, #768]	; (8000eec <filterUpdate+0x39c>)
 8000bea:	edd3 7a00 	vldr	s15, [r3]
 8000bee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000bf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bf6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	float halfSEq_4 = 0.5f * SEq_4;
 8000bfa:	4bbd      	ldr	r3, [pc, #756]	; (8000ef0 <filterUpdate+0x3a0>)
 8000bfc:	edd3 7a00 	vldr	s15, [r3]
 8000c00:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000c04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c08:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	float twoSEq_1 = 2.0f * SEq_1;
 8000c0c:	4bb5      	ldr	r3, [pc, #724]	; (8000ee4 <filterUpdate+0x394>)
 8000c0e:	edd3 7a00 	vldr	s15, [r3]
 8000c12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000c16:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	float twoSEq_2 = 2.0f * SEq_2;
 8000c1a:	4bb3      	ldr	r3, [pc, #716]	; (8000ee8 <filterUpdate+0x398>)
 8000c1c:	edd3 7a00 	vldr	s15, [r3]
 8000c20:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000c24:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	float twoSEq_3 = 2.0f * SEq_3;
 8000c28:	4bb0      	ldr	r3, [pc, #704]	; (8000eec <filterUpdate+0x39c>)
 8000c2a:	edd3 7a00 	vldr	s15, [r3]
 8000c2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000c32:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

	// Normalize the accelerometer measurement
	norm = sqrt(a_x * a_x + a_y * a_y + a_z * a_z);
 8000c36:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8000c3a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8000c3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c42:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8000c46:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8000c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c52:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8000c56:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000c5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c62:	ee17 0a90 	vmov	r0, s15
 8000c66:	f7ff fc1b 	bl	80004a0 <__aeabi_f2d>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	460c      	mov	r4, r1
 8000c6e:	ec44 3b10 	vmov	d0, r3, r4
 8000c72:	f004 fb41 	bl	80052f8 <sqrt>
 8000c76:	ec54 3b10 	vmov	r3, r4, d0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	4621      	mov	r1, r4
 8000c7e:	f7ff ff17 	bl	8000ab0 <__aeabi_d2f>
 8000c82:	4603      	mov	r3, r0
 8000c84:	643b      	str	r3, [r7, #64]	; 0x40
	if (norm != 0) {
 8000c86:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000c8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c92:	d018      	beq.n	8000cc6 <filterUpdate+0x176>
		a_x /= norm;
 8000c94:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8000c98:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ca0:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		a_y /= norm;
 8000ca4:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8000ca8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cb0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		a_z /= norm;
 8000cb4:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8000cb8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cc0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
 8000cc4:	e002      	b.n	8000ccc <filterUpdate+0x17c>
	}
	else {
		what = 1;
 8000cc6:	4b8b      	ldr	r3, [pc, #556]	; (8000ef4 <filterUpdate+0x3a4>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	601a      	str	r2, [r3, #0]
	}

	// Compute the objective function and Jacobian
	f_1 = twoSEq_2 * SEq_4 - twoSEq_1 * SEq_3 - a_x;
 8000ccc:	4b88      	ldr	r3, [pc, #544]	; (8000ef0 <filterUpdate+0x3a0>)
 8000cce:	ed93 7a00 	vldr	s14, [r3]
 8000cd2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000cd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cda:	4b84      	ldr	r3, [pc, #528]	; (8000eec <filterUpdate+0x39c>)
 8000cdc:	edd3 6a00 	vldr	s13, [r3]
 8000ce0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8000ce4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ce8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cec:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8000cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cf4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	f_2 = twoSEq_1 * SEq_2 + twoSEq_3 * SEq_4 - a_y;
 8000cf8:	4b7b      	ldr	r3, [pc, #492]	; (8000ee8 <filterUpdate+0x398>)
 8000cfa:	ed93 7a00 	vldr	s14, [r3]
 8000cfe:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8000d02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d06:	4b7a      	ldr	r3, [pc, #488]	; (8000ef0 <filterUpdate+0x3a0>)
 8000d08:	edd3 6a00 	vldr	s13, [r3]
 8000d0c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000d10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d18:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8000d1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d20:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	f_3 = 1.0f - twoSEq_2 * SEq_2 - twoSEq_3 * SEq_3 - a_z;
 8000d24:	4b70      	ldr	r3, [pc, #448]	; (8000ee8 <filterUpdate+0x398>)
 8000d26:	ed93 7a00 	vldr	s14, [r3]
 8000d2a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d3a:	4b6c      	ldr	r3, [pc, #432]	; (8000eec <filterUpdate+0x39c>)
 8000d3c:	edd3 6a00 	vldr	s13, [r3]
 8000d40:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000d44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d4c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d54:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	J_11or24 = twoSEq_3; // J_11 negated in matrix multiplication
 8000d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
	J_12or23 = 2.0f * SEq_4;
 8000d5c:	4b64      	ldr	r3, [pc, #400]	; (8000ef0 <filterUpdate+0x3a0>)
 8000d5e:	edd3 7a00 	vldr	s15, [r3]
 8000d62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d66:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	J_13or22 = twoSEq_1; // J_12 negated in matrix multiplication
 8000d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
	J_14or21 = twoSEq_2;
 8000d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
	J_32 = 2.0f * J_14or21; // negated in matrix multiplication
 8000d72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000d76:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d7a:	edc7 7a08 	vstr	s15, [r7, #32]
	J_33 = 2.0f * J_11or24; // negated in matrix multiplication
 8000d7e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000d82:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d86:	edc7 7a07 	vstr	s15, [r7, #28]

	// Compute the gradient (matrix multiplication)
	SEqHatDot_1 = J_14or21 * f_2 - J_11or24 * f_1;
 8000d8a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000d8e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d96:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8000d9a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000d9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000da2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000da6:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	SEqHatDot_2 = J_12or23 * f_1 + J_13or22 * f_2 - J_32 * f_3;
 8000daa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000dae:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000db2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000db6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000dba:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000dbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dc6:	edd7 6a08 	vldr	s13, [r7, #32]
 8000dca:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000dce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dd6:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	SEqHatDot_3 = J_12or23 * f_2 - J_33 * f_3 - J_13or22 * f_1;
 8000dda:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000dde:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000de2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000de6:	edd7 6a07 	vldr	s13, [r7, #28]
 8000dea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000dee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000df2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000df6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000dfa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000dfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e06:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	SEqHatDot_4 = J_14or21 * f_1 + J_11or24 * f_2;
 8000e0a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e0e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000e12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e16:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8000e1a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e26:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

	// Normalize the gradient
	norm = sqrt(SEqHatDot_1 * SEqHatDot_1 + SEqHatDot_2 * SEqHatDot_2 + SEqHatDot_3 * SEqHatDot_3 + SEqHatDot_4 * SEqHatDot_4);
 8000e2a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8000e2e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8000e32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e36:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8000e3a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8000e3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e46:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8000e4a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8000e4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e56:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8000e5a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000e5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e66:	ee17 0a90 	vmov	r0, s15
 8000e6a:	f7ff fb19 	bl	80004a0 <__aeabi_f2d>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	460c      	mov	r4, r1
 8000e72:	ec44 3b10 	vmov	d0, r3, r4
 8000e76:	f004 fa3f 	bl	80052f8 <sqrt>
 8000e7a:	ec54 3b10 	vmov	r3, r4, d0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	4621      	mov	r1, r4
 8000e82:	f7ff fe15 	bl	8000ab0 <__aeabi_d2f>
 8000e86:	4603      	mov	r3, r0
 8000e88:	643b      	str	r3, [r7, #64]	; 0x40
	if (norm != 0) {
 8000e8a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000e8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e96:	d02f      	beq.n	8000ef8 <filterUpdate+0x3a8>
		SEqHatDot_1 /= norm;
 8000e98:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8000e9c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ea4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		SEqHatDot_2 /= norm;
 8000ea8:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8000eac:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eb4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		SEqHatDot_3 /= norm;
 8000eb8:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8000ebc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ec4:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		SEqHatDot_4 /= norm;
 8000ec8:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8000ecc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000ed0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ed4:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
 8000ed8:	e011      	b.n	8000efe <filterUpdate+0x3ae>
 8000eda:	bf00      	nop
 8000edc:	40490fdb 	.word	0x40490fdb
 8000ee0:	43340000 	.word	0x43340000
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	20000094 	.word	0x20000094
 8000eec:	20000098 	.word	0x20000098
 8000ef0:	2000009c 	.word	0x2000009c
 8000ef4:	200000a0 	.word	0x200000a0
	}
	else {
		what = 1;
 8000ef8:	4bd3      	ldr	r3, [pc, #844]	; (8001248 <filterUpdate+0x6f8>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	601a      	str	r2, [r3, #0]
	}

	// Compute the quaternion derivative measured by gyroscopes
	SEqDot_omega_1 = -halfSEq_2 * w_x - halfSEq_3 * w_y - halfSEq_4 * w_z;
 8000efe:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8000f02:	eeb1 7a67 	vneg.f32	s14, s15
 8000f06:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8000f0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f0e:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8000f12:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000f16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f1e:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8000f22:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000f26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f2e:	edc7 7a06 	vstr	s15, [r7, #24]
	SEqDot_omega_2 = halfSEq_1 * w_x + halfSEq_3 * w_z - halfSEq_4 * w_y;
 8000f32:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000f36:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8000f3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f3e:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8000f42:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000f46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f4e:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8000f52:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000f56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f5e:	edc7 7a05 	vstr	s15, [r7, #20]
	SEqDot_omega_3 = halfSEq_1 * w_y - halfSEq_2 * w_z + halfSEq_4 * w_x;
 8000f62:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000f66:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000f6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f6e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8000f72:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000f76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f7e:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8000f82:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8000f86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f8e:	edc7 7a04 	vstr	s15, [r7, #16]
	SEqDot_omega_4 = halfSEq_1 * w_z + halfSEq_2 * w_y - halfSEq_3 * w_x;
 8000f92:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000f96:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000f9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f9e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8000fa2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000fa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000faa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fae:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8000fb2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8000fb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fbe:	edc7 7a03 	vstr	s15, [r7, #12]

	// Compute then integrate the estimated quaternion derivative
	SEq_1 += (SEqDot_omega_1 - (BETA * SEqHatDot_1)) * SAMPLING_RATE;
 8000fc2:	69b8      	ldr	r0, [r7, #24]
 8000fc4:	f7ff fa6c 	bl	80004a0 <__aeabi_f2d>
 8000fc8:	4604      	mov	r4, r0
 8000fca:	460d      	mov	r5, r1
 8000fcc:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8000fce:	f7ff fa67 	bl	80004a0 <__aeabi_f2d>
 8000fd2:	a399      	add	r3, pc, #612	; (adr r3, 8001238 <filterUpdate+0x6e8>)
 8000fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd8:	f7ff faba 	bl	8000550 <__aeabi_dmul>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	4629      	mov	r1, r5
 8000fe4:	f7ff f8fc 	bl	80001e0 <__aeabi_dsub>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	460c      	mov	r4, r1
 8000fec:	4618      	mov	r0, r3
 8000fee:	4621      	mov	r1, r4
 8000ff0:	a393      	add	r3, pc, #588	; (adr r3, 8001240 <filterUpdate+0x6f0>)
 8000ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff6:	f7ff faab 	bl	8000550 <__aeabi_dmul>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	460c      	mov	r4, r1
 8000ffe:	4625      	mov	r5, r4
 8001000:	461c      	mov	r4, r3
 8001002:	4b92      	ldr	r3, [pc, #584]	; (800124c <filterUpdate+0x6fc>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fa4a 	bl	80004a0 <__aeabi_f2d>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4620      	mov	r0, r4
 8001012:	4629      	mov	r1, r5
 8001014:	f7ff f8e6 	bl	80001e4 <__adddf3>
 8001018:	4603      	mov	r3, r0
 800101a:	460c      	mov	r4, r1
 800101c:	4618      	mov	r0, r3
 800101e:	4621      	mov	r1, r4
 8001020:	f7ff fd46 	bl	8000ab0 <__aeabi_d2f>
 8001024:	4602      	mov	r2, r0
 8001026:	4b89      	ldr	r3, [pc, #548]	; (800124c <filterUpdate+0x6fc>)
 8001028:	601a      	str	r2, [r3, #0]
	SEq_2 += (SEqDot_omega_2 - (BETA * SEqHatDot_2)) * SAMPLING_RATE;
 800102a:	6978      	ldr	r0, [r7, #20]
 800102c:	f7ff fa38 	bl	80004a0 <__aeabi_f2d>
 8001030:	4604      	mov	r4, r0
 8001032:	460d      	mov	r5, r1
 8001034:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001036:	f7ff fa33 	bl	80004a0 <__aeabi_f2d>
 800103a:	a37f      	add	r3, pc, #508	; (adr r3, 8001238 <filterUpdate+0x6e8>)
 800103c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001040:	f7ff fa86 	bl	8000550 <__aeabi_dmul>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4620      	mov	r0, r4
 800104a:	4629      	mov	r1, r5
 800104c:	f7ff f8c8 	bl	80001e0 <__aeabi_dsub>
 8001050:	4603      	mov	r3, r0
 8001052:	460c      	mov	r4, r1
 8001054:	4618      	mov	r0, r3
 8001056:	4621      	mov	r1, r4
 8001058:	a379      	add	r3, pc, #484	; (adr r3, 8001240 <filterUpdate+0x6f0>)
 800105a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105e:	f7ff fa77 	bl	8000550 <__aeabi_dmul>
 8001062:	4603      	mov	r3, r0
 8001064:	460c      	mov	r4, r1
 8001066:	4625      	mov	r5, r4
 8001068:	461c      	mov	r4, r3
 800106a:	4b79      	ldr	r3, [pc, #484]	; (8001250 <filterUpdate+0x700>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fa16 	bl	80004a0 <__aeabi_f2d>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4620      	mov	r0, r4
 800107a:	4629      	mov	r1, r5
 800107c:	f7ff f8b2 	bl	80001e4 <__adddf3>
 8001080:	4603      	mov	r3, r0
 8001082:	460c      	mov	r4, r1
 8001084:	4618      	mov	r0, r3
 8001086:	4621      	mov	r1, r4
 8001088:	f7ff fd12 	bl	8000ab0 <__aeabi_d2f>
 800108c:	4602      	mov	r2, r0
 800108e:	4b70      	ldr	r3, [pc, #448]	; (8001250 <filterUpdate+0x700>)
 8001090:	601a      	str	r2, [r3, #0]
	SEq_3 += (SEqDot_omega_3 - (BETA * SEqHatDot_3)) * SAMPLING_RATE;
 8001092:	6938      	ldr	r0, [r7, #16]
 8001094:	f7ff fa04 	bl	80004a0 <__aeabi_f2d>
 8001098:	4604      	mov	r4, r0
 800109a:	460d      	mov	r5, r1
 800109c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800109e:	f7ff f9ff 	bl	80004a0 <__aeabi_f2d>
 80010a2:	a365      	add	r3, pc, #404	; (adr r3, 8001238 <filterUpdate+0x6e8>)
 80010a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a8:	f7ff fa52 	bl	8000550 <__aeabi_dmul>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4620      	mov	r0, r4
 80010b2:	4629      	mov	r1, r5
 80010b4:	f7ff f894 	bl	80001e0 <__aeabi_dsub>
 80010b8:	4603      	mov	r3, r0
 80010ba:	460c      	mov	r4, r1
 80010bc:	4618      	mov	r0, r3
 80010be:	4621      	mov	r1, r4
 80010c0:	a35f      	add	r3, pc, #380	; (adr r3, 8001240 <filterUpdate+0x6f0>)
 80010c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c6:	f7ff fa43 	bl	8000550 <__aeabi_dmul>
 80010ca:	4603      	mov	r3, r0
 80010cc:	460c      	mov	r4, r1
 80010ce:	4625      	mov	r5, r4
 80010d0:	461c      	mov	r4, r3
 80010d2:	4b60      	ldr	r3, [pc, #384]	; (8001254 <filterUpdate+0x704>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff f9e2 	bl	80004a0 <__aeabi_f2d>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4620      	mov	r0, r4
 80010e2:	4629      	mov	r1, r5
 80010e4:	f7ff f87e 	bl	80001e4 <__adddf3>
 80010e8:	4603      	mov	r3, r0
 80010ea:	460c      	mov	r4, r1
 80010ec:	4618      	mov	r0, r3
 80010ee:	4621      	mov	r1, r4
 80010f0:	f7ff fcde 	bl	8000ab0 <__aeabi_d2f>
 80010f4:	4602      	mov	r2, r0
 80010f6:	4b57      	ldr	r3, [pc, #348]	; (8001254 <filterUpdate+0x704>)
 80010f8:	601a      	str	r2, [r3, #0]
	SEq_4 += (SEqDot_omega_4 - (BETA * SEqHatDot_4)) * SAMPLING_RATE;
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f7ff f9d0 	bl	80004a0 <__aeabi_f2d>
 8001100:	4604      	mov	r4, r0
 8001102:	460d      	mov	r5, r1
 8001104:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001106:	f7ff f9cb 	bl	80004a0 <__aeabi_f2d>
 800110a:	a34b      	add	r3, pc, #300	; (adr r3, 8001238 <filterUpdate+0x6e8>)
 800110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001110:	f7ff fa1e 	bl	8000550 <__aeabi_dmul>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4620      	mov	r0, r4
 800111a:	4629      	mov	r1, r5
 800111c:	f7ff f860 	bl	80001e0 <__aeabi_dsub>
 8001120:	4603      	mov	r3, r0
 8001122:	460c      	mov	r4, r1
 8001124:	4618      	mov	r0, r3
 8001126:	4621      	mov	r1, r4
 8001128:	a345      	add	r3, pc, #276	; (adr r3, 8001240 <filterUpdate+0x6f0>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	f7ff fa0f 	bl	8000550 <__aeabi_dmul>
 8001132:	4603      	mov	r3, r0
 8001134:	460c      	mov	r4, r1
 8001136:	4625      	mov	r5, r4
 8001138:	461c      	mov	r4, r3
 800113a:	4b47      	ldr	r3, [pc, #284]	; (8001258 <filterUpdate+0x708>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f9ae 	bl	80004a0 <__aeabi_f2d>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4620      	mov	r0, r4
 800114a:	4629      	mov	r1, r5
 800114c:	f7ff f84a 	bl	80001e4 <__adddf3>
 8001150:	4603      	mov	r3, r0
 8001152:	460c      	mov	r4, r1
 8001154:	4618      	mov	r0, r3
 8001156:	4621      	mov	r1, r4
 8001158:	f7ff fcaa 	bl	8000ab0 <__aeabi_d2f>
 800115c:	4602      	mov	r2, r0
 800115e:	4b3e      	ldr	r3, [pc, #248]	; (8001258 <filterUpdate+0x708>)
 8001160:	601a      	str	r2, [r3, #0]

	// Normalize quaternion
	norm = sqrt(SEq_1 * SEq_1 + SEq_2 * SEq_2 + SEq_3 * SEq_3 + SEq_4 * SEq_4);
 8001162:	4b3a      	ldr	r3, [pc, #232]	; (800124c <filterUpdate+0x6fc>)
 8001164:	ed93 7a00 	vldr	s14, [r3]
 8001168:	4b38      	ldr	r3, [pc, #224]	; (800124c <filterUpdate+0x6fc>)
 800116a:	edd3 7a00 	vldr	s15, [r3]
 800116e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001172:	4b37      	ldr	r3, [pc, #220]	; (8001250 <filterUpdate+0x700>)
 8001174:	edd3 6a00 	vldr	s13, [r3]
 8001178:	4b35      	ldr	r3, [pc, #212]	; (8001250 <filterUpdate+0x700>)
 800117a:	edd3 7a00 	vldr	s15, [r3]
 800117e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001182:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001186:	4b33      	ldr	r3, [pc, #204]	; (8001254 <filterUpdate+0x704>)
 8001188:	edd3 6a00 	vldr	s13, [r3]
 800118c:	4b31      	ldr	r3, [pc, #196]	; (8001254 <filterUpdate+0x704>)
 800118e:	edd3 7a00 	vldr	s15, [r3]
 8001192:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001196:	ee37 7a27 	vadd.f32	s14, s14, s15
 800119a:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <filterUpdate+0x708>)
 800119c:	edd3 6a00 	vldr	s13, [r3]
 80011a0:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <filterUpdate+0x708>)
 80011a2:	edd3 7a00 	vldr	s15, [r3]
 80011a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ae:	ee17 0a90 	vmov	r0, s15
 80011b2:	f7ff f975 	bl	80004a0 <__aeabi_f2d>
 80011b6:	4603      	mov	r3, r0
 80011b8:	460c      	mov	r4, r1
 80011ba:	ec44 3b10 	vmov	d0, r3, r4
 80011be:	f004 f89b 	bl	80052f8 <sqrt>
 80011c2:	ec54 3b10 	vmov	r3, r4, d0
 80011c6:	4618      	mov	r0, r3
 80011c8:	4621      	mov	r1, r4
 80011ca:	f7ff fc71 	bl	8000ab0 <__aeabi_d2f>
 80011ce:	4603      	mov	r3, r0
 80011d0:	643b      	str	r3, [r7, #64]	; 0x40
	if (norm != 0) {
 80011d2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80011d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011de:	d03d      	beq.n	800125c <filterUpdate+0x70c>
		SEq_1 /= norm;
 80011e0:	4b1a      	ldr	r3, [pc, #104]	; (800124c <filterUpdate+0x6fc>)
 80011e2:	edd3 6a00 	vldr	s13, [r3]
 80011e6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80011ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <filterUpdate+0x6fc>)
 80011f0:	edc3 7a00 	vstr	s15, [r3]
		SEq_2 /= norm;
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <filterUpdate+0x700>)
 80011f6:	edd3 6a00 	vldr	s13, [r3]
 80011fa:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80011fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <filterUpdate+0x700>)
 8001204:	edc3 7a00 	vstr	s15, [r3]
		SEq_3 /= norm;
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <filterUpdate+0x704>)
 800120a:	edd3 6a00 	vldr	s13, [r3]
 800120e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <filterUpdate+0x704>)
 8001218:	edc3 7a00 	vstr	s15, [r3]
		SEq_4 /= norm;
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <filterUpdate+0x708>)
 800121e:	edd3 6a00 	vldr	s13, [r3]
 8001222:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <filterUpdate+0x708>)
 800122c:	edc3 7a00 	vstr	s15, [r3]
 8001230:	e017      	b.n	8001262 <filterUpdate+0x712>
 8001232:	bf00      	nop
 8001234:	f3af 8000 	nop.w
 8001238:	b9e403c1 	.word	0xb9e403c1
 800123c:	3fb358e1 	.word	0x3fb358e1
 8001240:	40000000 	.word	0x40000000
 8001244:	3f847ae1 	.word	0x3f847ae1
 8001248:	200000a0 	.word	0x200000a0
 800124c:	20000000 	.word	0x20000000
 8001250:	20000094 	.word	0x20000094
 8001254:	20000098 	.word	0x20000098
 8001258:	2000009c 	.word	0x2000009c
	}
	else {
		what = 1;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <filterUpdate+0x740>)
 800125e:	2201      	movs	r2, #1
 8001260:	601a      	str	r2, [r3, #0]
	}

	q[0] = SEq_1;
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <filterUpdate+0x744>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	601a      	str	r2, [r3, #0]
	q[1] = SEq_2;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	3304      	adds	r3, #4
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <filterUpdate+0x748>)
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	601a      	str	r2, [r3, #0]
	q[2] = SEq_3;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	3308      	adds	r3, #8
 8001278:	4a08      	ldr	r2, [pc, #32]	; (800129c <filterUpdate+0x74c>)
 800127a:	6812      	ldr	r2, [r2, #0]
 800127c:	601a      	str	r2, [r3, #0]
	q[3] = SEq_4;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	330c      	adds	r3, #12
 8001282:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <filterUpdate+0x750>)
 8001284:	6812      	ldr	r2, [r2, #0]
 8001286:	601a      	str	r2, [r3, #0]
}
 8001288:	bf00      	nop
 800128a:	3788      	adds	r7, #136	; 0x88
 800128c:	46bd      	mov	sp, r7
 800128e:	bdb0      	pop	{r4, r5, r7, pc}
 8001290:	200000a0 	.word	0x200000a0
 8001294:	20000000 	.word	0x20000000
 8001298:	20000094 	.word	0x20000094
 800129c:	20000098 	.word	0x20000098
 80012a0:	2000009c 	.word	0x2000009c

080012a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a8:	f000 fcae 	bl	8001c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ac:	f000 f836 	bl	800131c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b0:	f000 f938 	bl	8001524 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012b4:	f000 f906 	bl	80014c4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80012b8:	f000 f890 	bl	80013dc <MX_I2C1_Init>
  MX_TIM6_Init();
 80012bc:	f000 f8cc 	bl	8001458 <MX_TIM6_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  MPU_Init(&hi2c1);
 80012c0:	4810      	ldr	r0, [pc, #64]	; (8001304 <main+0x60>)
 80012c2:	f000 f9d9 	bl	8001678 <MPU_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 80012c6:	4810      	ldr	r0, [pc, #64]	; (8001308 <main+0x64>)
 80012c8:	f003 f8c0 	bl	800444c <HAL_TIM_Base_Start_IT>

  cbuffer[0] = 'A';
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <main+0x68>)
 80012ce:	2241      	movs	r2, #65	; 0x41
 80012d0:	701a      	strb	r2, [r3, #0]
  cbuffer[3*sizeof(float)+1] = 'G';
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <main+0x68>)
 80012d4:	2247      	movs	r2, #71	; 0x47
 80012d6:	735a      	strb	r2, [r3, #13]
  cbuffer[6*sizeof(float)+2] = 'Q';
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <main+0x68>)
 80012da:	2251      	movs	r2, #81	; 0x51
 80012dc:	769a      	strb	r2, [r3, #26]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//sendQuatData(hh);
	  if (timer_elapsed) {
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <main+0x6c>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0fb      	beq.n	80012de <main+0x3a>
		  timer_elapsed = false;
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <main+0x6c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
		  MPU_ReadData(&hi2c1, fbuffer);
 80012ec:	4909      	ldr	r1, [pc, #36]	; (8001314 <main+0x70>)
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <main+0x60>)
 80012f0:	f000 fa2e 	bl	8001750 <MPU_ReadData>
		  filterUpdate(fbuffer, &fbuffer[SENSOR_DATA_N]);
 80012f4:	4908      	ldr	r1, [pc, #32]	; (8001318 <main+0x74>)
 80012f6:	4807      	ldr	r0, [pc, #28]	; (8001314 <main+0x70>)
 80012f8:	f7ff fc2a 	bl	8000b50 <filterUpdate>
		  sendQuatData(fbuffer);
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <main+0x70>)
 80012fe:	f000 f98f 	bl	8001620 <sendQuatData>
	  if (timer_elapsed) {
 8001302:	e7ec      	b.n	80012de <main+0x3a>
 8001304:	200000a8 	.word	0x200000a8
 8001308:	20000148 	.word	0x20000148
 800130c:	2000011c 	.word	0x2000011c
 8001310:	200000a4 	.word	0x200000a4
 8001314:	200000f4 	.word	0x200000f4
 8001318:	2000010c 	.word	0x2000010c

0800131c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b0a6      	sub	sp, #152	; 0x98
 8001320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001322:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001326:	2228      	movs	r2, #40	; 0x28
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f003 ffdb 	bl	80052e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001330:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	2258      	movs	r2, #88	; 0x58
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f003 ffcd 	bl	80052e6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800134c:	2302      	movs	r3, #2
 800134e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001350:	2301      	movs	r3, #1
 8001352:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001354:	2310      	movs	r3, #16
 8001356:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135a:	2302      	movs	r3, #2
 800135c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001360:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001364:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001368:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800136c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001376:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800137a:	4618      	mov	r0, r3
 800137c:	f001 fcd0 	bl	8002d20 <HAL_RCC_OscConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001386:	f000 fad1 	bl	800192c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138a:	230f      	movs	r3, #15
 800138c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138e:	2302      	movs	r3, #2
 8001390:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001392:	2300      	movs	r3, #0
 8001394:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800139a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013a4:	2102      	movs	r1, #2
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 fbd0 	bl	8003b4c <HAL_RCC_ClockConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013b2:	f000 fabb 	bl	800192c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80013b6:	2322      	movs	r3, #34	; 0x22
 80013b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4618      	mov	r0, r3
 80013c6:	f002 fdf7 	bl	8003fb8 <HAL_RCCEx_PeriphCLKConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80013d0:	f000 faac 	bl	800192c <Error_Handler>
  }
}
 80013d4:	bf00      	nop
 80013d6:	3798      	adds	r7, #152	; 0x98
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <MX_I2C1_Init+0x74>)
 80013e2:	4a1c      	ldr	r2, [pc, #112]	; (8001454 <MX_I2C1_Init+0x78>)
 80013e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <MX_I2C1_Init+0x74>)
 80013e8:	f240 220b 	movw	r2, #523	; 0x20b
 80013ec:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013ee:	4b18      	ldr	r3, [pc, #96]	; (8001450 <MX_I2C1_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f4:	4b16      	ldr	r3, [pc, #88]	; (8001450 <MX_I2C1_Init+0x74>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <MX_I2C1_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <MX_I2C1_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <MX_I2C1_Init+0x74>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <MX_I2C1_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <MX_I2C1_Init+0x74>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001418:	480d      	ldr	r0, [pc, #52]	; (8001450 <MX_I2C1_Init+0x74>)
 800141a:	f000 ff0f 	bl	800223c <HAL_I2C_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001424:	f000 fa82 	bl	800192c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001428:	2100      	movs	r1, #0
 800142a:	4809      	ldr	r0, [pc, #36]	; (8001450 <MX_I2C1_Init+0x74>)
 800142c:	f001 fbe0 	bl	8002bf0 <HAL_I2CEx_ConfigAnalogFilter>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001436:	f000 fa79 	bl	800192c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800143a:	2100      	movs	r1, #0
 800143c:	4804      	ldr	r0, [pc, #16]	; (8001450 <MX_I2C1_Init+0x74>)
 800143e:	f001 fc22 	bl	8002c86 <HAL_I2CEx_ConfigDigitalFilter>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001448:	f000 fa70 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200000a8 	.word	0x200000a8
 8001454:	40005400 	.word	0x40005400

08001458 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <MX_TIM6_Init+0x64>)
 800146a:	4a15      	ldr	r2, [pc, #84]	; (80014c0 <MX_TIM6_Init+0x68>)
 800146c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200;
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <MX_TIM6_Init+0x64>)
 8001470:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001474:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <MX_TIM6_Init+0x64>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <MX_TIM6_Init+0x64>)
 800147e:	2263      	movs	r2, #99	; 0x63
 8001480:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MX_TIM6_Init+0x64>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <MX_TIM6_Init+0x64>)
 800148a:	f002 ffb3 	bl	80043f4 <HAL_TIM_Base_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001494:	f000 fa4a 	bl	800192c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_TIM6_Init+0x64>)
 80014a6:	f003 f9e1 	bl	800486c <HAL_TIMEx_MasterConfigSynchronization>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80014b0:	f000 fa3c 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000148 	.word	0x20000148
 80014c0:	40001000 	.word	0x40001000

080014c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <MX_USART2_UART_Init+0x58>)
 80014ca:	4a15      	ldr	r2, [pc, #84]	; (8001520 <MX_USART2_UART_Init+0x5c>)
 80014cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <MX_USART2_UART_Init+0x58>)
 80014d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_USART2_UART_Init+0x58>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_USART2_UART_Init+0x58>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_USART2_UART_Init+0x58>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_USART2_UART_Init+0x58>)
 80014ea:	220c      	movs	r2, #12
 80014ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <MX_USART2_UART_Init+0x58>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_USART2_UART_Init+0x58>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <MX_USART2_UART_Init+0x58>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_USART2_UART_Init+0x58>)
 8001502:	2200      	movs	r2, #0
 8001504:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_USART2_UART_Init+0x58>)
 8001508:	f003 fa5a 	bl	80049c0 <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001512:	f000 fa0b 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000188 	.word	0x20000188
 8001520:	40004400 	.word	0x40004400

08001524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <MX_GPIO_Init+0xc4>)
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	4a2a      	ldr	r2, [pc, #168]	; (80015e8 <MX_GPIO_Init+0xc4>)
 8001540:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001544:	6153      	str	r3, [r2, #20]
 8001546:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <MX_GPIO_Init+0xc4>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001552:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <MX_GPIO_Init+0xc4>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	4a24      	ldr	r2, [pc, #144]	; (80015e8 <MX_GPIO_Init+0xc4>)
 8001558:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800155c:	6153      	str	r3, [r2, #20]
 800155e:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <MX_GPIO_Init+0xc4>)
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <MX_GPIO_Init+0xc4>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	4a1e      	ldr	r2, [pc, #120]	; (80015e8 <MX_GPIO_Init+0xc4>)
 8001570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001574:	6153      	str	r3, [r2, #20]
 8001576:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <MX_GPIO_Init+0xc4>)
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <MX_GPIO_Init+0xc4>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	4a18      	ldr	r2, [pc, #96]	; (80015e8 <MX_GPIO_Init+0xc4>)
 8001588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800158c:	6153      	str	r3, [r2, #20]
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <MX_GPIO_Init+0xc4>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	2120      	movs	r1, #32
 800159e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a2:	f000 fe33 	bl	800220c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MX_GPIO_Init+0xc8>)
 80015ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4619      	mov	r1, r3
 80015ba:	480d      	ldr	r0, [pc, #52]	; (80015f0 <MX_GPIO_Init+0xcc>)
 80015bc:	f000 fc9c 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015c0:	2320      	movs	r3, #32
 80015c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c4:	2301      	movs	r3, #1
 80015c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	4619      	mov	r1, r3
 80015d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015da:	f000 fc8d 	bl	8001ef8 <HAL_GPIO_Init>

}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	; 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000
 80015ec:	10210000 	.word	0x10210000
 80015f0:	48000800 	.word	0x48000800

080015f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a06      	ldr	r2, [pc, #24]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d102      	bne.n	800160a <HAL_TIM_PeriodElapsedCallback+0x16>
		timer_elapsed = true;
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001606:	2201      	movs	r2, #1
 8001608:	701a      	strb	r2, [r3, #0]
	}
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000148 	.word	0x20000148
 800161c:	200000a4 	.word	0x200000a4

08001620 <sendQuatData>:

void sendQuatData(float * data)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	memcpy(&cbuffer[1], (char *)data, 3*sizeof(float));
 8001628:	220c      	movs	r2, #12
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	480d      	ldr	r0, [pc, #52]	; (8001664 <sendQuatData+0x44>)
 800162e:	f003 fe4f 	bl	80052d0 <memcpy>
	memcpy(&cbuffer[3*sizeof(float)+2], (char *)&data[3], 3*sizeof(float));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	330c      	adds	r3, #12
 8001636:	220c      	movs	r2, #12
 8001638:	4619      	mov	r1, r3
 800163a:	480b      	ldr	r0, [pc, #44]	; (8001668 <sendQuatData+0x48>)
 800163c:	f003 fe48 	bl	80052d0 <memcpy>
	memcpy(&cbuffer[6*sizeof(float)+3], (char *)&data[6], 4*sizeof(float));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3318      	adds	r3, #24
 8001644:	2210      	movs	r2, #16
 8001646:	4619      	mov	r1, r3
 8001648:	4808      	ldr	r0, [pc, #32]	; (800166c <sendQuatData+0x4c>)
 800164a:	f003 fe41 	bl	80052d0 <memcpy>

	HAL_UART_Transmit(&huart2, cbuffer, BUFF_SIZE, 5);
 800164e:	2305      	movs	r3, #5
 8001650:	222b      	movs	r2, #43	; 0x2b
 8001652:	4907      	ldr	r1, [pc, #28]	; (8001670 <sendQuatData+0x50>)
 8001654:	4807      	ldr	r0, [pc, #28]	; (8001674 <sendQuatData+0x54>)
 8001656:	f003 fa01 	bl	8004a5c <HAL_UART_Transmit>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	2000011d 	.word	0x2000011d
 8001668:	2000012a 	.word	0x2000012a
 800166c:	20000137 	.word	0x20000137
 8001670:	2000011c 	.word	0x2000011c
 8001674:	20000188 	.word	0x20000188

08001678 <MPU_Init>:

HAL_StatusTypeDef MPU_Init(I2C_HandleTypeDef * hi2c)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af04      	add	r7, sp, #16
 800167e:	6078      	str	r0, [r7, #4]
	unsigned char buffer[1];


	// check if mpu is available
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, MPU_ADDR, MPU_WHO_AM_I, 1, buffer, 1, MPU_TIMEOUT);
 8001680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001684:	9302      	str	r3, [sp, #8]
 8001686:	2301      	movs	r3, #1
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2301      	movs	r3, #1
 8001692:	2275      	movs	r2, #117	; 0x75
 8001694:	21d0      	movs	r1, #208	; 0xd0
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 ff74 	bl	8002584 <HAL_I2C_Mem_Read>
 800169c:	4603      	mov	r3, r0
 800169e:	73fb      	strb	r3, [r7, #15]

	if (status == HAL_OK) {
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d14e      	bne.n	8001744 <MPU_Init+0xcc>
		// HAL_OK == 0, so we perform or with all outputs

		// power up mpu
		buffer[0] = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	733b      	strb	r3, [r7, #12]
		status = HAL_I2C_Mem_Write(hi2c, MPU_ADDR, MPU_PWR_MGMT_1, 1, buffer, 1, MPU_TIMEOUT);
 80016aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ae:	9302      	str	r3, [sp, #8]
 80016b0:	2301      	movs	r3, #1
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2301      	movs	r3, #1
 80016bc:	226b      	movs	r2, #107	; 0x6b
 80016be:	21d0      	movs	r1, #208	; 0xd0
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 fe4b 	bl	800235c <HAL_I2C_Mem_Write>
 80016c6:	4603      	mov	r3, r0
 80016c8:	73fb      	strb	r3, [r7, #15]

		if (status == HAL_OK) {
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d139      	bne.n	8001744 <MPU_Init+0xcc>
		// set sampling rate
			buffer[0] = MPU_SMPLRT_DIV;
 80016d0:	2319      	movs	r3, #25
 80016d2:	733b      	strb	r3, [r7, #12]
			status = HAL_I2C_Mem_Write(hi2c, MPU_ADDR, MPU_SMPLRT_DIV, 1, buffer, 1, MPU_TIMEOUT);
 80016d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d8:	9302      	str	r3, [sp, #8]
 80016da:	2301      	movs	r3, #1
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2301      	movs	r3, #1
 80016e6:	2219      	movs	r2, #25
 80016e8:	21d0      	movs	r1, #208	; 0xd0
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 fe36 	bl	800235c <HAL_I2C_Mem_Write>
 80016f0:	4603      	mov	r3, r0
 80016f2:	73fb      	strb	r3, [r7, #15]

			if (status == HAL_OK) {
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d124      	bne.n	8001744 <MPU_Init+0xcc>
				// configure accelerometer
				buffer[0] = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	733b      	strb	r3, [r7, #12]
				status = HAL_I2C_Mem_Write(hi2c, MPU_ADDR, MPU_ACCEL_CONFIG, 1, buffer, 1, MPU_TIMEOUT);
 80016fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001702:	9302      	str	r3, [sp, #8]
 8001704:	2301      	movs	r3, #1
 8001706:	9301      	str	r3, [sp, #4]
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	2301      	movs	r3, #1
 8001710:	221c      	movs	r2, #28
 8001712:	21d0      	movs	r1, #208	; 0xd0
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 fe21 	bl	800235c <HAL_I2C_Mem_Write>
 800171a:	4603      	mov	r3, r0
 800171c:	73fb      	strb	r3, [r7, #15]

				if (status == HAL_OK) {
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10f      	bne.n	8001744 <MPU_Init+0xcc>
					// configure gyroscope
					status = HAL_I2C_Mem_Write(hi2c, MPU_ADDR, MPU_GYRO_CONFIG, 1, buffer, 1, MPU_TIMEOUT);
 8001724:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2301      	movs	r3, #1
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2301      	movs	r3, #1
 8001736:	221b      	movs	r2, #27
 8001738:	21d0      	movs	r1, #208	; 0xd0
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 fe0e 	bl	800235c <HAL_I2C_Mem_Write>
 8001740:	4603      	mov	r3, r0
 8001742:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return status;
 8001744:	7bfb      	ldrb	r3, [r7, #15]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <MPU_ReadData>:




HAL_StatusTypeDef MPU_ReadData(I2C_HandleTypeDef * hi2c, float * d)
{
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b08d      	sub	sp, #52	; 0x34
 8001754:	af04      	add	r7, sp, #16
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
	// Read 6 BYTES of data starting from ACCEL_XOUT_H register
	HAL_StatusTypeDef status = HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	77fb      	strb	r3, [r7, #31]

	if (d != NULL) {
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 80d6 	beq.w	8001912 <MPU_ReadData+0x1c2>
		unsigned char buffer[6];
		status = HAL_I2C_Mem_Read(hi2c, MPU_ADDR, MPU_ACCEL_OUT, 1, buffer, 6, MPU_TIMEOUT);
 8001766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176a:	9302      	str	r3, [sp, #8]
 800176c:	2306      	movs	r3, #6
 800176e:	9301      	str	r3, [sp, #4]
 8001770:	f107 030c 	add.w	r3, r7, #12
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	2301      	movs	r3, #1
 8001778:	223b      	movs	r2, #59	; 0x3b
 800177a:	21d0      	movs	r1, #208	; 0xd0
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 ff01 	bl	8002584 <HAL_I2C_Mem_Read>
 8001782:	4603      	mov	r3, r0
 8001784:	77fb      	strb	r3, [r7, #31]

		if (status == HAL_OK) {
 8001786:	7ffb      	ldrb	r3, [r7, #31]
 8001788:	2b00      	cmp	r3, #0
 800178a:	f040 80c2 	bne.w	8001912 <MPU_ReadData+0x1c2>
			int16_t accel_X_RAW = (int16_t)(buffer[0] << 8 | buffer [1]);
 800178e:	7b3b      	ldrb	r3, [r7, #12]
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	b21a      	sxth	r2, r3
 8001794:	7b7b      	ldrb	r3, [r7, #13]
 8001796:	b21b      	sxth	r3, r3
 8001798:	4313      	orrs	r3, r2
 800179a:	83bb      	strh	r3, [r7, #28]
			int16_t accel_Y_RAW = (int16_t)(buffer[2] << 8 | buffer [3]);
 800179c:	7bbb      	ldrb	r3, [r7, #14]
 800179e:	021b      	lsls	r3, r3, #8
 80017a0:	b21a      	sxth	r2, r3
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	4313      	orrs	r3, r2
 80017a8:	837b      	strh	r3, [r7, #26]
			int16_t accel_Z_RAW = (int16_t)(buffer[4] << 8 | buffer [5]);
 80017aa:	7c3b      	ldrb	r3, [r7, #16]
 80017ac:	021b      	lsls	r3, r3, #8
 80017ae:	b21a      	sxth	r2, r3
 80017b0:	7c7b      	ldrb	r3, [r7, #17]
 80017b2:	b21b      	sxth	r3, r3
 80017b4:	4313      	orrs	r3, r2
 80017b6:	833b      	strh	r3, [r7, #24]
			/*** convert the RAW values into acceleration in 'g'
				 we have to divide according to the Full scale value set in FS_SEL
				 I have configured FS_SEL = 0. So I am dividing by 16384.0
				 for more details check ACCEL_CONFIG Register              ****/

			d[0] = accel_X_RAW/16384.0;  // get the float g
 80017b8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fe5d 	bl	800047c <__aeabi_i2d>
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	4b58      	ldr	r3, [pc, #352]	; (8001928 <MPU_ReadData+0x1d8>)
 80017c8:	f7fe ffec 	bl	80007a4 <__aeabi_ddiv>
 80017cc:	4603      	mov	r3, r0
 80017ce:	460c      	mov	r4, r1
 80017d0:	4618      	mov	r0, r3
 80017d2:	4621      	mov	r1, r4
 80017d4:	f7ff f96c 	bl	8000ab0 <__aeabi_d2f>
 80017d8:	4602      	mov	r2, r0
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	601a      	str	r2, [r3, #0]
			d[1] = accel_Y_RAW/16384.0;
 80017de:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fe4a 	bl	800047c <__aeabi_i2d>
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	4b4e      	ldr	r3, [pc, #312]	; (8001928 <MPU_ReadData+0x1d8>)
 80017ee:	f7fe ffd9 	bl	80007a4 <__aeabi_ddiv>
 80017f2:	4603      	mov	r3, r0
 80017f4:	460c      	mov	r4, r1
 80017f6:	4619      	mov	r1, r3
 80017f8:	4622      	mov	r2, r4
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	1d1c      	adds	r4, r3, #4
 80017fe:	4608      	mov	r0, r1
 8001800:	4611      	mov	r1, r2
 8001802:	f7ff f955 	bl	8000ab0 <__aeabi_d2f>
 8001806:	4603      	mov	r3, r0
 8001808:	6023      	str	r3, [r4, #0]
			d[2] = accel_Z_RAW/16384.0;
 800180a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fe34 	bl	800047c <__aeabi_i2d>
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	4b43      	ldr	r3, [pc, #268]	; (8001928 <MPU_ReadData+0x1d8>)
 800181a:	f7fe ffc3 	bl	80007a4 <__aeabi_ddiv>
 800181e:	4603      	mov	r3, r0
 8001820:	460c      	mov	r4, r1
 8001822:	4619      	mov	r1, r3
 8001824:	4622      	mov	r2, r4
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	f103 0408 	add.w	r4, r3, #8
 800182c:	4608      	mov	r0, r1
 800182e:	4611      	mov	r1, r2
 8001830:	f7ff f93e 	bl	8000ab0 <__aeabi_d2f>
 8001834:	4603      	mov	r3, r0
 8001836:	6023      	str	r3, [r4, #0]

			status = HAL_I2C_Mem_Read(hi2c, MPU_ADDR, MPU_GYRO_OUT, 1, buffer, 6, MPU_TIMEOUT);
 8001838:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183c:	9302      	str	r3, [sp, #8]
 800183e:	2306      	movs	r3, #6
 8001840:	9301      	str	r3, [sp, #4]
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	2301      	movs	r3, #1
 800184a:	2243      	movs	r2, #67	; 0x43
 800184c:	21d0      	movs	r1, #208	; 0xd0
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 fe98 	bl	8002584 <HAL_I2C_Mem_Read>
 8001854:	4603      	mov	r3, r0
 8001856:	77fb      	strb	r3, [r7, #31]

			if (status == HAL_OK) {
 8001858:	7ffb      	ldrb	r3, [r7, #31]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d159      	bne.n	8001912 <MPU_ReadData+0x1c2>

				int16_t Gyro_X_RAW = (int16_t)(buffer[0] << 8 | buffer [1]);
 800185e:	7b3b      	ldrb	r3, [r7, #12]
 8001860:	021b      	lsls	r3, r3, #8
 8001862:	b21a      	sxth	r2, r3
 8001864:	7b7b      	ldrb	r3, [r7, #13]
 8001866:	b21b      	sxth	r3, r3
 8001868:	4313      	orrs	r3, r2
 800186a:	82fb      	strh	r3, [r7, #22]
				int16_t Gyro_Y_RAW = (int16_t)(buffer[2] << 8 | buffer [3]);
 800186c:	7bbb      	ldrb	r3, [r7, #14]
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	b21a      	sxth	r2, r3
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	b21b      	sxth	r3, r3
 8001876:	4313      	orrs	r3, r2
 8001878:	82bb      	strh	r3, [r7, #20]
				int16_t Gyro_Z_RAW = (int16_t)(buffer[4] << 8 | buffer [5]);
 800187a:	7c3b      	ldrb	r3, [r7, #16]
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	b21a      	sxth	r2, r3
 8001880:	7c7b      	ldrb	r3, [r7, #17]
 8001882:	b21b      	sxth	r3, r3
 8001884:	4313      	orrs	r3, r2
 8001886:	827b      	strh	r3, [r7, #18]
				/*** convert the RAW values into dps (°/s)
					 we have to divide according to the Full scale value set in FS_SEL
					 I have configured FS_SEL = 0. So I am dividing by 131.0
					 for more details check GYRO_CONFIG Register              ****/

				d[3] = Gyro_X_RAW/131.0;
 8001888:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fdf5 	bl	800047c <__aeabi_i2d>
 8001892:	a323      	add	r3, pc, #140	; (adr r3, 8001920 <MPU_ReadData+0x1d0>)
 8001894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001898:	f7fe ff84 	bl	80007a4 <__aeabi_ddiv>
 800189c:	4603      	mov	r3, r0
 800189e:	460c      	mov	r4, r1
 80018a0:	4619      	mov	r1, r3
 80018a2:	4622      	mov	r2, r4
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	f103 040c 	add.w	r4, r3, #12
 80018aa:	4608      	mov	r0, r1
 80018ac:	4611      	mov	r1, r2
 80018ae:	f7ff f8ff 	bl	8000ab0 <__aeabi_d2f>
 80018b2:	4603      	mov	r3, r0
 80018b4:	6023      	str	r3, [r4, #0]
				d[4] = Gyro_Y_RAW/131.0;
 80018b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe fdde 	bl	800047c <__aeabi_i2d>
 80018c0:	a317      	add	r3, pc, #92	; (adr r3, 8001920 <MPU_ReadData+0x1d0>)
 80018c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c6:	f7fe ff6d 	bl	80007a4 <__aeabi_ddiv>
 80018ca:	4603      	mov	r3, r0
 80018cc:	460c      	mov	r4, r1
 80018ce:	4619      	mov	r1, r3
 80018d0:	4622      	mov	r2, r4
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	f103 0410 	add.w	r4, r3, #16
 80018d8:	4608      	mov	r0, r1
 80018da:	4611      	mov	r1, r2
 80018dc:	f7ff f8e8 	bl	8000ab0 <__aeabi_d2f>
 80018e0:	4603      	mov	r3, r0
 80018e2:	6023      	str	r3, [r4, #0]
				d[5] = Gyro_Z_RAW/131.0;
 80018e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fdc7 	bl	800047c <__aeabi_i2d>
 80018ee:	a30c      	add	r3, pc, #48	; (adr r3, 8001920 <MPU_ReadData+0x1d0>)
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	f7fe ff56 	bl	80007a4 <__aeabi_ddiv>
 80018f8:	4603      	mov	r3, r0
 80018fa:	460c      	mov	r4, r1
 80018fc:	4619      	mov	r1, r3
 80018fe:	4622      	mov	r2, r4
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	f103 0414 	add.w	r4, r3, #20
 8001906:	4608      	mov	r0, r1
 8001908:	4611      	mov	r1, r2
 800190a:	f7ff f8d1 	bl	8000ab0 <__aeabi_d2f>
 800190e:	4603      	mov	r3, r0
 8001910:	6023      	str	r3, [r4, #0]
			}
		}
	}

	return status;
 8001912:	7ffb      	ldrb	r3, [r7, #31]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3724      	adds	r7, #36	; 0x24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd90      	pop	{r4, r7, pc}
 800191c:	f3af 8000 	nop.w
 8001920:	00000000 	.word	0x00000000
 8001924:	40606000 	.word	0x40606000
 8001928:	40d00000 	.word	0x40d00000

0800192c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001942:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_MspInit+0x44>)
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <HAL_MspInit+0x44>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6193      	str	r3, [r2, #24]
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <HAL_MspInit+0x44>)
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_MspInit+0x44>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	4a08      	ldr	r2, [pc, #32]	; (8001980 <HAL_MspInit+0x44>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001964:	61d3      	str	r3, [r2, #28]
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_MspInit+0x44>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000

08001984 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a26      	ldr	r2, [pc, #152]	; (8001a3c <HAL_I2C_MspInit+0xb8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d145      	bne.n	8001a32 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <HAL_I2C_MspInit+0xbc>)
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	4a25      	ldr	r2, [pc, #148]	; (8001a40 <HAL_I2C_MspInit+0xbc>)
 80019ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b0:	6153      	str	r3, [r2, #20]
 80019b2:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <HAL_I2C_MspInit+0xbc>)
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <HAL_I2C_MspInit+0xbc>)
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	4a1f      	ldr	r2, [pc, #124]	; (8001a40 <HAL_I2C_MspInit+0xbc>)
 80019c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c8:	6153      	str	r3, [r2, #20]
 80019ca:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <HAL_I2C_MspInit+0xbc>)
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019dc:	2312      	movs	r3, #18
 80019de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e0:	2301      	movs	r3, #1
 80019e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019e8:	2304      	movs	r3, #4
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4619      	mov	r1, r3
 80019f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f6:	f000 fa7f 	bl	8001ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019fe:	2312      	movs	r3, #18
 8001a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a02:	2301      	movs	r3, #1
 8001a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a06:	2303      	movs	r3, #3
 8001a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a0a:	2304      	movs	r3, #4
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	480b      	ldr	r0, [pc, #44]	; (8001a44 <HAL_I2C_MspInit+0xc0>)
 8001a16:	f000 fa6f 	bl	8001ef8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_I2C_MspInit+0xbc>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <HAL_I2C_MspInit+0xbc>)
 8001a20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a24:	61d3      	str	r3, [r2, #28]
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_I2C_MspInit+0xbc>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a32:	bf00      	nop
 8001a34:	3728      	adds	r7, #40	; 0x28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40005400 	.word	0x40005400
 8001a40:	40021000 	.word	0x40021000
 8001a44:	48000400 	.word	0x48000400

08001a48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a0d      	ldr	r2, [pc, #52]	; (8001a8c <HAL_TIM_Base_MspInit+0x44>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d113      	bne.n	8001a82 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <HAL_TIM_Base_MspInit+0x48>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	4a0c      	ldr	r2, [pc, #48]	; (8001a90 <HAL_TIM_Base_MspInit+0x48>)
 8001a60:	f043 0310 	orr.w	r3, r3, #16
 8001a64:	61d3      	str	r3, [r2, #28]
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_TIM_Base_MspInit+0x48>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	f003 0310 	and.w	r3, r3, #16
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2100      	movs	r1, #0
 8001a76:	2036      	movs	r0, #54	; 0x36
 8001a78:	f000 fa07 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a7c:	2036      	movs	r0, #54	; 0x36
 8001a7e:	f000 fa20 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40001000 	.word	0x40001000
 8001a90:	40021000 	.word	0x40021000

08001a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a17      	ldr	r2, [pc, #92]	; (8001b10 <HAL_UART_MspInit+0x7c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d128      	bne.n	8001b08 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ab6:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <HAL_UART_MspInit+0x80>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	4a16      	ldr	r2, [pc, #88]	; (8001b14 <HAL_UART_MspInit+0x80>)
 8001abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac0:	61d3      	str	r3, [r2, #28]
 8001ac2:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <HAL_UART_MspInit+0x80>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <HAL_UART_MspInit+0x80>)
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	4a10      	ldr	r2, [pc, #64]	; (8001b14 <HAL_UART_MspInit+0x80>)
 8001ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad8:	6153      	str	r3, [r2, #20]
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <HAL_UART_MspInit+0x80>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ae6:	230c      	movs	r3, #12
 8001ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001af6:	2307      	movs	r3, #7
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b04:	f000 f9f8 	bl	8001ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b08:	bf00      	nop
 8001b0a:	3728      	adds	r7, #40	; 0x28
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40004400 	.word	0x40004400
 8001b14:	40021000 	.word	0x40021000

08001b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <HardFault_Handler+0x4>

08001b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <MemManage_Handler+0x4>

08001b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <BusFault_Handler+0x4>

08001b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <UsageFault_Handler+0x4>

08001b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b6c:	f000 f892 	bl	8001c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <TIM6_DAC_IRQHandler+0x10>)
 8001b7a:	f002 fc91 	bl	80044a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000148 	.word	0x20000148

08001b88 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <SystemInit+0x28>)
 8001b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b92:	4a07      	ldr	r2, [pc, #28]	; (8001bb0 <SystemInit+0x28>)
 8001b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <SystemInit+0x28>)
 8001b9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ba2:	609a      	str	r2, [r3, #8]
#endif
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001bb8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001bba:	e003      	b.n	8001bc4 <LoopCopyDataInit>

08001bbc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001bbe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001bc0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001bc2:	3104      	adds	r1, #4

08001bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001bc4:	480b      	ldr	r0, [pc, #44]	; (8001bf4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001bc8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001bcc:	d3f6      	bcc.n	8001bbc <CopyDataInit>
	ldr	r2, =_sbss
 8001bce:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001bd0:	e002      	b.n	8001bd8 <LoopFillZerobss>

08001bd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001bd2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001bd4:	f842 3b04 	str.w	r3, [r2], #4

08001bd8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <LoopForever+0x16>)
	cmp	r2, r3
 8001bda:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001bdc:	d3f9      	bcc.n	8001bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bde:	f7ff ffd3 	bl	8001b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001be2:	f003 fb51 	bl	8005288 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001be6:	f7ff fb5d 	bl	80012a4 <main>

08001bea <LoopForever>:

LoopForever:
    b LoopForever
 8001bea:	e7fe      	b.n	8001bea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bec:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001bf0:	08005570 	.word	0x08005570
	ldr	r0, =_sdata
 8001bf4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001bf8:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8001bfc:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8001c00:	2000020c 	.word	0x2000020c

08001c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c04:	e7fe      	b.n	8001c04 <ADC1_2_IRQHandler>
	...

08001c08 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <HAL_Init+0x28>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a07      	ldr	r2, [pc, #28]	; (8001c30 <HAL_Init+0x28>)
 8001c12:	f043 0310 	orr.w	r3, r3, #16
 8001c16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f000 f92b 	bl	8001e74 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f000 f808 	bl	8001c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c24:	f7ff fe8a 	bl	800193c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40022000 	.word	0x40022000

08001c34 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_InitTick+0x54>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_InitTick+0x58>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	4619      	mov	r1, r3
 8001c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 f943 	bl	8001ede <HAL_SYSTICK_Config>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00e      	b.n	8001c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b0f      	cmp	r3, #15
 8001c66:	d80a      	bhi.n	8001c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	f000 f90b 	bl	8001e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c74:	4a06      	ldr	r2, [pc, #24]	; (8001c90 <HAL_InitTick+0x5c>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e000      	b.n	8001c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000004 	.word	0x20000004
 8001c8c:	2000000c 	.word	0x2000000c
 8001c90:	20000008 	.word	0x20000008

08001c94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_IncTick+0x20>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_IncTick+0x24>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <HAL_IncTick+0x24>)
 8001ca6:	6013      	str	r3, [r2, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	2000000c 	.word	0x2000000c
 8001cb8:	20000208 	.word	0x20000208

08001cbc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;  
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_GetTick+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000208 	.word	0x20000208

08001cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d06:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	60d3      	str	r3, [r2, #12]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <__NVIC_GetPriorityGrouping+0x18>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	0a1b      	lsrs	r3, r3, #8
 8001d26:	f003 0307 	and.w	r3, r3, #7
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	db0b      	blt.n	8001d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	f003 021f 	and.w	r2, r3, #31
 8001d50:	4907      	ldr	r1, [pc, #28]	; (8001d70 <__NVIC_EnableIRQ+0x38>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	095b      	lsrs	r3, r3, #5
 8001d58:	2001      	movs	r0, #1
 8001d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000e100 	.word	0xe000e100

08001d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	db0a      	blt.n	8001d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	490c      	ldr	r1, [pc, #48]	; (8001dc0 <__NVIC_SetPriority+0x4c>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	0112      	lsls	r2, r2, #4
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	440b      	add	r3, r1
 8001d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d9c:	e00a      	b.n	8001db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4908      	ldr	r1, [pc, #32]	; (8001dc4 <__NVIC_SetPriority+0x50>)
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	3b04      	subs	r3, #4
 8001dac:	0112      	lsls	r2, r2, #4
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	440b      	add	r3, r1
 8001db2:	761a      	strb	r2, [r3, #24]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000e100 	.word	0xe000e100
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	; 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f1c3 0307 	rsb	r3, r3, #7
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	bf28      	it	cs
 8001de6:	2304      	movcs	r3, #4
 8001de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3304      	adds	r3, #4
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d902      	bls.n	8001df8 <NVIC_EncodePriority+0x30>
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3b03      	subs	r3, #3
 8001df6:	e000      	b.n	8001dfa <NVIC_EncodePriority+0x32>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43da      	mvns	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e10:	f04f 31ff 	mov.w	r1, #4294967295
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1a:	43d9      	mvns	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	4313      	orrs	r3, r2
         );
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3724      	adds	r7, #36	; 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e40:	d301      	bcc.n	8001e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e42:	2301      	movs	r3, #1
 8001e44:	e00f      	b.n	8001e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e46:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <SysTick_Config+0x40>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4e:	210f      	movs	r1, #15
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295
 8001e54:	f7ff ff8e 	bl	8001d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <SysTick_Config+0x40>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5e:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <SysTick_Config+0x40>)
 8001e60:	2207      	movs	r2, #7
 8001e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	e000e010 	.word	0xe000e010

08001e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ff29 	bl	8001cd4 <__NVIC_SetPriorityGrouping>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e9c:	f7ff ff3e 	bl	8001d1c <__NVIC_GetPriorityGrouping>
 8001ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	6978      	ldr	r0, [r7, #20]
 8001ea8:	f7ff ff8e 	bl	8001dc8 <NVIC_EncodePriority>
 8001eac:	4602      	mov	r2, r0
 8001eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff5d 	bl	8001d74 <__NVIC_SetPriority>
}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff31 	bl	8001d38 <__NVIC_EnableIRQ>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ffa2 	bl	8001e30 <SysTick_Config>
 8001eec:	4603      	mov	r3, r0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f06:	e160      	b.n	80021ca <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	4013      	ands	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 8152 	beq.w	80021c4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d00b      	beq.n	8001f40 <HAL_GPIO_Init+0x48>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d007      	beq.n	8001f40 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f34:	2b11      	cmp	r3, #17
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b12      	cmp	r3, #18
 8001f3e:	d130      	bne.n	8001fa2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68da      	ldr	r2, [r3, #12]
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f76:	2201      	movs	r2, #1
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	091b      	lsrs	r3, r3, #4
 8001f8c:	f003 0201 	and.w	r2, r3, #1
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	2203      	movs	r2, #3
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_Init+0xea>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b12      	cmp	r3, #18
 8001fe0:	d123      	bne.n	800202a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	08da      	lsrs	r2, r3, #3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3208      	adds	r2, #8
 8001fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	220f      	movs	r2, #15
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	08da      	lsrs	r2, r3, #3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3208      	adds	r2, #8
 8002024:	6939      	ldr	r1, [r7, #16]
 8002026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	2203      	movs	r2, #3
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 0203 	and.w	r2, r3, #3
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 80ac 	beq.w	80021c4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206c:	4b5e      	ldr	r3, [pc, #376]	; (80021e8 <HAL_GPIO_Init+0x2f0>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a5d      	ldr	r2, [pc, #372]	; (80021e8 <HAL_GPIO_Init+0x2f0>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6193      	str	r3, [r2, #24]
 8002078:	4b5b      	ldr	r3, [pc, #364]	; (80021e8 <HAL_GPIO_Init+0x2f0>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002084:	4a59      	ldr	r2, [pc, #356]	; (80021ec <HAL_GPIO_Init+0x2f4>)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	3302      	adds	r3, #2
 800208c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002090:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	220f      	movs	r2, #15
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020ae:	d025      	beq.n	80020fc <HAL_GPIO_Init+0x204>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a4f      	ldr	r2, [pc, #316]	; (80021f0 <HAL_GPIO_Init+0x2f8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d01f      	beq.n	80020f8 <HAL_GPIO_Init+0x200>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a4e      	ldr	r2, [pc, #312]	; (80021f4 <HAL_GPIO_Init+0x2fc>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d019      	beq.n	80020f4 <HAL_GPIO_Init+0x1fc>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a4d      	ldr	r2, [pc, #308]	; (80021f8 <HAL_GPIO_Init+0x300>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d013      	beq.n	80020f0 <HAL_GPIO_Init+0x1f8>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a4c      	ldr	r2, [pc, #304]	; (80021fc <HAL_GPIO_Init+0x304>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00d      	beq.n	80020ec <HAL_GPIO_Init+0x1f4>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a4b      	ldr	r2, [pc, #300]	; (8002200 <HAL_GPIO_Init+0x308>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d007      	beq.n	80020e8 <HAL_GPIO_Init+0x1f0>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a4a      	ldr	r2, [pc, #296]	; (8002204 <HAL_GPIO_Init+0x30c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_GPIO_Init+0x1ec>
 80020e0:	2306      	movs	r3, #6
 80020e2:	e00c      	b.n	80020fe <HAL_GPIO_Init+0x206>
 80020e4:	2307      	movs	r3, #7
 80020e6:	e00a      	b.n	80020fe <HAL_GPIO_Init+0x206>
 80020e8:	2305      	movs	r3, #5
 80020ea:	e008      	b.n	80020fe <HAL_GPIO_Init+0x206>
 80020ec:	2304      	movs	r3, #4
 80020ee:	e006      	b.n	80020fe <HAL_GPIO_Init+0x206>
 80020f0:	2303      	movs	r3, #3
 80020f2:	e004      	b.n	80020fe <HAL_GPIO_Init+0x206>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e002      	b.n	80020fe <HAL_GPIO_Init+0x206>
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <HAL_GPIO_Init+0x206>
 80020fc:	2300      	movs	r3, #0
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	f002 0203 	and.w	r2, r2, #3
 8002104:	0092      	lsls	r2, r2, #2
 8002106:	4093      	lsls	r3, r2
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800210e:	4937      	ldr	r1, [pc, #220]	; (80021ec <HAL_GPIO_Init+0x2f4>)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	089b      	lsrs	r3, r3, #2
 8002114:	3302      	adds	r3, #2
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800211c:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <HAL_GPIO_Init+0x310>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	43db      	mvns	r3, r3
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	4013      	ands	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002140:	4a31      	ldr	r2, [pc, #196]	; (8002208 <HAL_GPIO_Init+0x310>)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002146:	4b30      	ldr	r3, [pc, #192]	; (8002208 <HAL_GPIO_Init+0x310>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	43db      	mvns	r3, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4013      	ands	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800216a:	4a27      	ldr	r2, [pc, #156]	; (8002208 <HAL_GPIO_Init+0x310>)
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002170:	4b25      	ldr	r3, [pc, #148]	; (8002208 <HAL_GPIO_Init+0x310>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	43db      	mvns	r3, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	4313      	orrs	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002194:	4a1c      	ldr	r2, [pc, #112]	; (8002208 <HAL_GPIO_Init+0x310>)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800219a:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_GPIO_Init+0x310>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	43db      	mvns	r3, r3
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4013      	ands	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021be:	4a12      	ldr	r2, [pc, #72]	; (8002208 <HAL_GPIO_Init+0x310>)
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	3301      	adds	r3, #1
 80021c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	fa22 f303 	lsr.w	r3, r2, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f47f ae97 	bne.w	8001f08 <HAL_GPIO_Init+0x10>
  }
}
 80021da:	bf00      	nop
 80021dc:	371c      	adds	r7, #28
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40010000 	.word	0x40010000
 80021f0:	48000400 	.word	0x48000400
 80021f4:	48000800 	.word	0x48000800
 80021f8:	48000c00 	.word	0x48000c00
 80021fc:	48001000 	.word	0x48001000
 8002200:	48001400 	.word	0x48001400
 8002204:	48001800 	.word	0x48001800
 8002208:	40010400 	.word	0x40010400

0800220c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	807b      	strh	r3, [r7, #2]
 8002218:	4613      	mov	r3, r2
 800221a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800221c:	787b      	ldrb	r3, [r7, #1]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002222:	887a      	ldrh	r2, [r7, #2]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002228:	e002      	b.n	8002230 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800222a:	887a      	ldrh	r2, [r7, #2]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e081      	b.n	8002352 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d106      	bne.n	8002268 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff fb8e 	bl	8001984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2224      	movs	r2, #36	; 0x24
 800226c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0201 	bic.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800228c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800229c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d107      	bne.n	80022b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	e006      	b.n	80022c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80022c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d104      	bne.n	80022d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691a      	ldr	r2, [r3, #16]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	ea42 0103 	orr.w	r1, r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	021a      	lsls	r2, r3, #8
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69d9      	ldr	r1, [r3, #28]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1a      	ldr	r2, [r3, #32]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2220      	movs	r2, #32
 800233e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af02      	add	r7, sp, #8
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	4608      	mov	r0, r1
 8002366:	4611      	mov	r1, r2
 8002368:	461a      	mov	r2, r3
 800236a:	4603      	mov	r3, r0
 800236c:	817b      	strh	r3, [r7, #10]
 800236e:	460b      	mov	r3, r1
 8002370:	813b      	strh	r3, [r7, #8]
 8002372:	4613      	mov	r3, r2
 8002374:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b20      	cmp	r3, #32
 8002380:	f040 80f9 	bne.w	8002576 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <HAL_I2C_Mem_Write+0x34>
 800238a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800238c:	2b00      	cmp	r3, #0
 800238e:	d105      	bne.n	800239c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002396:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0ed      	b.n	8002578 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_I2C_Mem_Write+0x4e>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e0e6      	b.n	8002578 <HAL_I2C_Mem_Write+0x21c>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023b2:	f7ff fc83 	bl	8001cbc <HAL_GetTick>
 80023b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2319      	movs	r3, #25
 80023be:	2201      	movs	r2, #1
 80023c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 fac3 	bl	8002950 <I2C_WaitOnFlagUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0d1      	b.n	8002578 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2221      	movs	r2, #33	; 0x21
 80023d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2240      	movs	r2, #64	; 0x40
 80023e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a3a      	ldr	r2, [r7, #32]
 80023ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023fc:	88f8      	ldrh	r0, [r7, #6]
 80023fe:	893a      	ldrh	r2, [r7, #8]
 8002400:	8979      	ldrh	r1, [r7, #10]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	4603      	mov	r3, r0
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 f9d3 	bl	80027b8 <I2C_RequestMemoryWrite>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e0a9      	b.n	8002578 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002428:	b29b      	uxth	r3, r3
 800242a:	2bff      	cmp	r3, #255	; 0xff
 800242c:	d90e      	bls.n	800244c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	22ff      	movs	r2, #255	; 0xff
 8002432:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002438:	b2da      	uxtb	r2, r3
 800243a:	8979      	ldrh	r1, [r7, #10]
 800243c:	2300      	movs	r3, #0
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 fba5 	bl	8002b94 <I2C_TransferConfig>
 800244a:	e00f      	b.n	800246c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245a:	b2da      	uxtb	r2, r3
 800245c:	8979      	ldrh	r1, [r7, #10]
 800245e:	2300      	movs	r3, #0
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 fb94 	bl	8002b94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 faad 	bl	80029d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e07b      	b.n	8002578 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	781a      	ldrb	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249a:	b29b      	uxth	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a8:	3b01      	subs	r3, #1
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d034      	beq.n	8002524 <HAL_I2C_Mem_Write+0x1c8>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d130      	bne.n	8002524 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c8:	2200      	movs	r2, #0
 80024ca:	2180      	movs	r1, #128	; 0x80
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 fa3f 	bl	8002950 <I2C_WaitOnFlagUntilTimeout>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e04d      	b.n	8002578 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2bff      	cmp	r3, #255	; 0xff
 80024e4:	d90e      	bls.n	8002504 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	22ff      	movs	r2, #255	; 0xff
 80024ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	8979      	ldrh	r1, [r7, #10]
 80024f4:	2300      	movs	r3, #0
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 fb49 	bl	8002b94 <I2C_TransferConfig>
 8002502:	e00f      	b.n	8002524 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002512:	b2da      	uxtb	r2, r3
 8002514:	8979      	ldrh	r1, [r7, #10]
 8002516:	2300      	movs	r3, #0
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fb38 	bl	8002b94 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002528:	b29b      	uxth	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d19e      	bne.n	800246c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 fa8c 	bl	8002a50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e01a      	b.n	8002578 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2220      	movs	r2, #32
 8002548:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6859      	ldr	r1, [r3, #4]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <HAL_I2C_Mem_Write+0x224>)
 8002556:	400b      	ands	r3, r1
 8002558:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2220      	movs	r2, #32
 800255e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	e000      	b.n	8002578 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002576:	2302      	movs	r3, #2
  }
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	fe00e800 	.word	0xfe00e800

08002584 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af02      	add	r7, sp, #8
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	4608      	mov	r0, r1
 800258e:	4611      	mov	r1, r2
 8002590:	461a      	mov	r2, r3
 8002592:	4603      	mov	r3, r0
 8002594:	817b      	strh	r3, [r7, #10]
 8002596:	460b      	mov	r3, r1
 8002598:	813b      	strh	r3, [r7, #8]
 800259a:	4613      	mov	r3, r2
 800259c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b20      	cmp	r3, #32
 80025a8:	f040 80fd 	bne.w	80027a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <HAL_I2C_Mem_Read+0x34>
 80025b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d105      	bne.n	80025c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0f1      	b.n	80027a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_I2C_Mem_Read+0x4e>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e0ea      	b.n	80027a8 <HAL_I2C_Mem_Read+0x224>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025da:	f7ff fb6f 	bl	8001cbc <HAL_GetTick>
 80025de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	2319      	movs	r3, #25
 80025e6:	2201      	movs	r2, #1
 80025e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 f9af 	bl	8002950 <I2C_WaitOnFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0d5      	b.n	80027a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2222      	movs	r2, #34	; 0x22
 8002600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2240      	movs	r2, #64	; 0x40
 8002608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a3a      	ldr	r2, [r7, #32]
 8002616:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800261c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002624:	88f8      	ldrh	r0, [r7, #6]
 8002626:	893a      	ldrh	r2, [r7, #8]
 8002628:	8979      	ldrh	r1, [r7, #10]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	4603      	mov	r3, r0
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f913 	bl	8002860 <I2C_RequestMemoryRead>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0ad      	b.n	80027a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29b      	uxth	r3, r3
 8002652:	2bff      	cmp	r3, #255	; 0xff
 8002654:	d90e      	bls.n	8002674 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	22ff      	movs	r2, #255	; 0xff
 800265a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002660:	b2da      	uxtb	r2, r3
 8002662:	8979      	ldrh	r1, [r7, #10]
 8002664:	4b52      	ldr	r3, [pc, #328]	; (80027b0 <HAL_I2C_Mem_Read+0x22c>)
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 fa91 	bl	8002b94 <I2C_TransferConfig>
 8002672:	e00f      	b.n	8002694 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002682:	b2da      	uxtb	r2, r3
 8002684:	8979      	ldrh	r1, [r7, #10]
 8002686:	4b4a      	ldr	r3, [pc, #296]	; (80027b0 <HAL_I2C_Mem_Read+0x22c>)
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fa80 	bl	8002b94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269a:	2200      	movs	r2, #0
 800269c:	2104      	movs	r1, #4
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 f956 	bl	8002950 <I2C_WaitOnFlagUntilTimeout>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e07c      	b.n	80027a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d034      	beq.n	8002754 <HAL_I2C_Mem_Read+0x1d0>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d130      	bne.n	8002754 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f8:	2200      	movs	r2, #0
 80026fa:	2180      	movs	r1, #128	; 0x80
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 f927 	bl	8002950 <I2C_WaitOnFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e04d      	b.n	80027a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002710:	b29b      	uxth	r3, r3
 8002712:	2bff      	cmp	r3, #255	; 0xff
 8002714:	d90e      	bls.n	8002734 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	22ff      	movs	r2, #255	; 0xff
 800271a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002720:	b2da      	uxtb	r2, r3
 8002722:	8979      	ldrh	r1, [r7, #10]
 8002724:	2300      	movs	r3, #0
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 fa31 	bl	8002b94 <I2C_TransferConfig>
 8002732:	e00f      	b.n	8002754 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002742:	b2da      	uxtb	r2, r3
 8002744:	8979      	ldrh	r1, [r7, #10]
 8002746:	2300      	movs	r3, #0
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 fa20 	bl	8002b94 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002758:	b29b      	uxth	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d19a      	bne.n	8002694 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f974 	bl	8002a50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e01a      	b.n	80027a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2220      	movs	r2, #32
 8002778:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6859      	ldr	r1, [r3, #4]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_I2C_Mem_Read+0x230>)
 8002786:	400b      	ands	r3, r1
 8002788:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e000      	b.n	80027a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80027a6:	2302      	movs	r3, #2
  }
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	80002400 	.word	0x80002400
 80027b4:	fe00e800 	.word	0xfe00e800

080027b8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af02      	add	r7, sp, #8
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	4608      	mov	r0, r1
 80027c2:	4611      	mov	r1, r2
 80027c4:	461a      	mov	r2, r3
 80027c6:	4603      	mov	r3, r0
 80027c8:	817b      	strh	r3, [r7, #10]
 80027ca:	460b      	mov	r3, r1
 80027cc:	813b      	strh	r3, [r7, #8]
 80027ce:	4613      	mov	r3, r2
 80027d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	8979      	ldrh	r1, [r7, #10]
 80027d8:	4b20      	ldr	r3, [pc, #128]	; (800285c <I2C_RequestMemoryWrite+0xa4>)
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 f9d7 	bl	8002b94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027e6:	69fa      	ldr	r2, [r7, #28]
 80027e8:	69b9      	ldr	r1, [r7, #24]
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f8f0 	bl	80029d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e02c      	b.n	8002854 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d105      	bne.n	800280c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002800:	893b      	ldrh	r3, [r7, #8]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	629a      	str	r2, [r3, #40]	; 0x28
 800280a:	e015      	b.n	8002838 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800280c:	893b      	ldrh	r3, [r7, #8]
 800280e:	0a1b      	lsrs	r3, r3, #8
 8002810:	b29b      	uxth	r3, r3
 8002812:	b2da      	uxtb	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	69b9      	ldr	r1, [r7, #24]
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f8d6 	bl	80029d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e012      	b.n	8002854 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800282e:	893b      	ldrh	r3, [r7, #8]
 8002830:	b2da      	uxtb	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2200      	movs	r2, #0
 8002840:	2180      	movs	r1, #128	; 0x80
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 f884 	bl	8002950 <I2C_WaitOnFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	80002000 	.word	0x80002000

08002860 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af02      	add	r7, sp, #8
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	4608      	mov	r0, r1
 800286a:	4611      	mov	r1, r2
 800286c:	461a      	mov	r2, r3
 800286e:	4603      	mov	r3, r0
 8002870:	817b      	strh	r3, [r7, #10]
 8002872:	460b      	mov	r3, r1
 8002874:	813b      	strh	r3, [r7, #8]
 8002876:	4613      	mov	r3, r2
 8002878:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	b2da      	uxtb	r2, r3
 800287e:	8979      	ldrh	r1, [r7, #10]
 8002880:	4b20      	ldr	r3, [pc, #128]	; (8002904 <I2C_RequestMemoryRead+0xa4>)
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	2300      	movs	r3, #0
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f984 	bl	8002b94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	69b9      	ldr	r1, [r7, #24]
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f89d 	bl	80029d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e02c      	b.n	80028fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d105      	bne.n	80028b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028a6:	893b      	ldrh	r3, [r7, #8]
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28
 80028b0:	e015      	b.n	80028de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028b2:	893b      	ldrh	r3, [r7, #8]
 80028b4:	0a1b      	lsrs	r3, r3, #8
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	69b9      	ldr	r1, [r7, #24]
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f883 	bl	80029d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e012      	b.n	80028fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028d4:	893b      	ldrh	r3, [r7, #8]
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	2200      	movs	r2, #0
 80028e6:	2140      	movs	r1, #64	; 0x40
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 f831 	bl	8002950 <I2C_WaitOnFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	80002000 	.word	0x80002000

08002908 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b02      	cmp	r3, #2
 800291c:	d103      	bne.n	8002926 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2200      	movs	r2, #0
 8002924:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b01      	cmp	r3, #1
 8002932:	d007      	beq.n	8002944 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699a      	ldr	r2, [r3, #24]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	619a      	str	r2, [r3, #24]
  }
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	4613      	mov	r3, r2
 800295e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002960:	e022      	b.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002968:	d01e      	beq.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800296a:	f7ff f9a7 	bl	8001cbc <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d302      	bcc.n	8002980 <I2C_WaitOnFlagUntilTimeout+0x30>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d113      	bne.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002984:	f043 0220 	orr.w	r2, r3, #32
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e00f      	b.n	80029c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699a      	ldr	r2, [r3, #24]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	4013      	ands	r3, r2
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	bf0c      	ite	eq
 80029b8:	2301      	moveq	r3, #1
 80029ba:	2300      	movne	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	461a      	mov	r2, r3
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d0cd      	beq.n	8002962 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029dc:	e02c      	b.n	8002a38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f870 	bl	8002ac8 <I2C_IsAcknowledgeFailed>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e02a      	b.n	8002a48 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d01e      	beq.n	8002a38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fa:	f7ff f95f 	bl	8001cbc <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d302      	bcc.n	8002a10 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d113      	bne.n	8002a38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a14:	f043 0220 	orr.w	r2, r3, #32
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e007      	b.n	8002a48 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d1cb      	bne.n	80029de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a5c:	e028      	b.n	8002ab0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f830 	bl	8002ac8 <I2C_IsAcknowledgeFailed>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e026      	b.n	8002ac0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a72:	f7ff f923 	bl	8001cbc <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d302      	bcc.n	8002a88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d113      	bne.n	8002ab0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8c:	f043 0220 	orr.w	r2, r3, #32
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e007      	b.n	8002ac0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	f003 0320 	and.w	r3, r3, #32
 8002aba:	2b20      	cmp	r3, #32
 8002abc:	d1cf      	bne.n	8002a5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	2b10      	cmp	r3, #16
 8002ae0:	d151      	bne.n	8002b86 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ae2:	e022      	b.n	8002b2a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aea:	d01e      	beq.n	8002b2a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aec:	f7ff f8e6 	bl	8001cbc <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d302      	bcc.n	8002b02 <I2C_IsAcknowledgeFailed+0x3a>
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d113      	bne.n	8002b2a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b06:	f043 0220 	orr.w	r2, r3, #32
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2220      	movs	r2, #32
 8002b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e02e      	b.n	8002b88 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d1d5      	bne.n	8002ae4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2210      	movs	r2, #16
 8002b3e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2220      	movs	r2, #32
 8002b46:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f7ff fedd 	bl	8002908 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6859      	ldr	r1, [r3, #4]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <I2C_IsAcknowledgeFailed+0xc8>)
 8002b5a:	400b      	ands	r3, r1
 8002b5c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	f043 0204 	orr.w	r2, r3, #4
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	fe00e800 	.word	0xfe00e800

08002b94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	607b      	str	r3, [r7, #4]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	817b      	strh	r3, [r7, #10]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	0d5b      	lsrs	r3, r3, #21
 8002bb0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002bb4:	4b0d      	ldr	r3, [pc, #52]	; (8002bec <I2C_TransferConfig+0x58>)
 8002bb6:	430b      	orrs	r3, r1
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	ea02 0103 	and.w	r1, r2, r3
 8002bbe:	897b      	ldrh	r3, [r7, #10]
 8002bc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bc4:	7a7b      	ldrb	r3, [r7, #9]
 8002bc6:	041b      	lsls	r3, r3, #16
 8002bc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002bde:	bf00      	nop
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	03ff63ff 	.word	0x03ff63ff

08002bf0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b20      	cmp	r3, #32
 8002c04:	d138      	bne.n	8002c78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e032      	b.n	8002c7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2224      	movs	r2, #36	; 0x24
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0201 	bic.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6819      	ldr	r1, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	e000      	b.n	8002c7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c78:	2302      	movs	r3, #2
  }
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b085      	sub	sp, #20
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d139      	bne.n	8002d10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d101      	bne.n	8002caa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e033      	b.n	8002d12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2224      	movs	r2, #36	; 0x24
 8002cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0201 	bic.w	r2, r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	021b      	lsls	r3, r3, #8
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	e000      	b.n	8002d12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d10:	2302      	movs	r3, #2
  }
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	1d3b      	adds	r3, r7, #4
 8002d2a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d2c:	1d3b      	adds	r3, r7, #4
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d102      	bne.n	8002d3a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	f000 bf01 	b.w	8003b3c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3a:	1d3b      	adds	r3, r7, #4
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8160 	beq.w	800300a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d4a:	4bae      	ldr	r3, [pc, #696]	; (8003004 <HAL_RCC_OscConfig+0x2e4>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d00c      	beq.n	8002d70 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d56:	4bab      	ldr	r3, [pc, #684]	; (8003004 <HAL_RCC_OscConfig+0x2e4>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d159      	bne.n	8002e16 <HAL_RCC_OscConfig+0xf6>
 8002d62:	4ba8      	ldr	r3, [pc, #672]	; (8003004 <HAL_RCC_OscConfig+0x2e4>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6e:	d152      	bne.n	8002e16 <HAL_RCC_OscConfig+0xf6>
 8002d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d74:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d78:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d84:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d88:	fab3 f383 	clz	r3, r3
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d102      	bne.n	8002da2 <HAL_RCC_OscConfig+0x82>
 8002d9c:	4b99      	ldr	r3, [pc, #612]	; (8003004 <HAL_RCC_OscConfig+0x2e4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	e015      	b.n	8002dce <HAL_RCC_OscConfig+0xae>
 8002da2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002da6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002db6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dba:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002dbe:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002dc2:	fa93 f3a3 	rbit	r3, r3
 8002dc6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002dca:	4b8e      	ldr	r3, [pc, #568]	; (8003004 <HAL_RCC_OscConfig+0x2e4>)
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dd2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002dd6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002dda:	fa92 f2a2 	rbit	r2, r2
 8002dde:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002de2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002de6:	fab2 f282 	clz	r2, r2
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	f042 0220 	orr.w	r2, r2, #32
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	f002 021f 	and.w	r2, r2, #31
 8002df6:	2101      	movs	r1, #1
 8002df8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 8102 	beq.w	8003008 <HAL_RCC_OscConfig+0x2e8>
 8002e04:	1d3b      	adds	r3, r7, #4
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f040 80fc 	bne.w	8003008 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	f000 be93 	b.w	8003b3c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e16:	1d3b      	adds	r3, r7, #4
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e20:	d106      	bne.n	8002e30 <HAL_RCC_OscConfig+0x110>
 8002e22:	4b78      	ldr	r3, [pc, #480]	; (8003004 <HAL_RCC_OscConfig+0x2e4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a77      	ldr	r2, [pc, #476]	; (8003004 <HAL_RCC_OscConfig+0x2e4>)
 8002e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	e030      	b.n	8002e92 <HAL_RCC_OscConfig+0x172>
 8002e30:	1d3b      	adds	r3, r7, #4
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10c      	bne.n	8002e54 <HAL_RCC_OscConfig+0x134>
 8002e3a:	4b72      	ldr	r3, [pc, #456]	; (8003004 <HAL_RCC_OscConfig+0x2e4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a71      	ldr	r2, [pc, #452]	; (8003004 <HAL_RCC_OscConfig+0x2e4>)
 8002e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	4b6f      	ldr	r3, [pc, #444]	; (8003004 <HAL_RCC_OscConfig+0x2e4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a6e      	ldr	r2, [pc, #440]	; (8003004 <HAL_RCC_OscConfig+0x2e4>)
 8002e4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	e01e      	b.n	8002e92 <HAL_RCC_OscConfig+0x172>
 8002e54:	1d3b      	adds	r3, r7, #4
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e5e:	d10c      	bne.n	8002e7a <HAL_RCC_OscConfig+0x15a>
 8002e60:	4b68      	ldr	r3, [pc, #416]	; (8003004 <HAL_RCC_OscConfig+0x2e4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a67      	ldr	r2, [pc, #412]	; (8003004 <HAL_RCC_OscConfig+0x2e4>)
 8002e66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	4b65      	ldr	r3, [pc, #404]	; (8003004 <HAL_RCC_OscConfig+0x2e4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a64      	ldr	r2, [pc, #400]	; (8003004 <HAL_RCC_OscConfig+0x2e4>)
 8002e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	e00b      	b.n	8002e92 <HAL_RCC_OscConfig+0x172>
 8002e7a:	4b62      	ldr	r3, [pc, #392]	; (8003004 <HAL_RCC_OscConfig+0x2e4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a61      	ldr	r2, [pc, #388]	; (8003004 <HAL_RCC_OscConfig+0x2e4>)
 8002e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	4b5f      	ldr	r3, [pc, #380]	; (8003004 <HAL_RCC_OscConfig+0x2e4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a5e      	ldr	r2, [pc, #376]	; (8003004 <HAL_RCC_OscConfig+0x2e4>)
 8002e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e90:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d059      	beq.n	8002f50 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7fe ff0e 	bl	8001cbc <HAL_GetTick>
 8002ea0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea4:	e00a      	b.n	8002ebc <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ea6:	f7fe ff09 	bl	8001cbc <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b64      	cmp	r3, #100	; 0x64
 8002eb4:	d902      	bls.n	8002ebc <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	f000 be40 	b.w	8003b3c <HAL_RCC_OscConfig+0xe1c>
 8002ebc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ec0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002ec8:	fa93 f3a3 	rbit	r3, r3
 8002ecc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002ed0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed4:	fab3 f383 	clz	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d102      	bne.n	8002eee <HAL_RCC_OscConfig+0x1ce>
 8002ee8:	4b46      	ldr	r3, [pc, #280]	; (8003004 <HAL_RCC_OscConfig+0x2e4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	e015      	b.n	8002f1a <HAL_RCC_OscConfig+0x1fa>
 8002eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ef2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002f02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f06:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002f0a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002f0e:	fa93 f3a3 	rbit	r3, r3
 8002f12:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002f16:	4b3b      	ldr	r3, [pc, #236]	; (8003004 <HAL_RCC_OscConfig+0x2e4>)
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f1e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002f22:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002f26:	fa92 f2a2 	rbit	r2, r2
 8002f2a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002f2e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002f32:	fab2 f282 	clz	r2, r2
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	f042 0220 	orr.w	r2, r2, #32
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	f002 021f 	and.w	r2, r2, #31
 8002f42:	2101      	movs	r1, #1
 8002f44:	fa01 f202 	lsl.w	r2, r1, r2
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0ab      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x186>
 8002f4e:	e05c      	b.n	800300a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe feb4 	bl	8001cbc <HAL_GetTick>
 8002f54:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f58:	e00a      	b.n	8002f70 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f5a:	f7fe feaf 	bl	8001cbc <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b64      	cmp	r3, #100	; 0x64
 8002f68:	d902      	bls.n	8002f70 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	f000 bde6 	b.w	8003b3c <HAL_RCC_OscConfig+0xe1c>
 8002f70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f74:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002f7c:	fa93 f3a3 	rbit	r3, r3
 8002f80:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002f84:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f88:	fab3 f383 	clz	r3, r3
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d102      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x282>
 8002f9c:	4b19      	ldr	r3, [pc, #100]	; (8003004 <HAL_RCC_OscConfig+0x2e4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	e015      	b.n	8002fce <HAL_RCC_OscConfig+0x2ae>
 8002fa2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fa6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002fb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002fbe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002fca:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <HAL_RCC_OscConfig+0x2e4>)
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fd2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002fd6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002fda:	fa92 f2a2 	rbit	r2, r2
 8002fde:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002fe2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002fe6:	fab2 f282 	clz	r2, r2
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	f042 0220 	orr.w	r2, r2, #32
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	f002 021f 	and.w	r2, r2, #31
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1ab      	bne.n	8002f5a <HAL_RCC_OscConfig+0x23a>
 8003002:	e002      	b.n	800300a <HAL_RCC_OscConfig+0x2ea>
 8003004:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800300a:	1d3b      	adds	r3, r7, #4
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 8170 	beq.w	80032fa <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800301a:	4bd0      	ldr	r3, [pc, #832]	; (800335c <HAL_RCC_OscConfig+0x63c>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f003 030c 	and.w	r3, r3, #12
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00c      	beq.n	8003040 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003026:	4bcd      	ldr	r3, [pc, #820]	; (800335c <HAL_RCC_OscConfig+0x63c>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	2b08      	cmp	r3, #8
 8003030:	d16d      	bne.n	800310e <HAL_RCC_OscConfig+0x3ee>
 8003032:	4bca      	ldr	r3, [pc, #808]	; (800335c <HAL_RCC_OscConfig+0x63c>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800303a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800303e:	d166      	bne.n	800310e <HAL_RCC_OscConfig+0x3ee>
 8003040:	2302      	movs	r3, #2
 8003042:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003046:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800304a:	fa93 f3a3 	rbit	r3, r3
 800304e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003052:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003056:	fab3 f383 	clz	r3, r3
 800305a:	b2db      	uxtb	r3, r3
 800305c:	095b      	lsrs	r3, r3, #5
 800305e:	b2db      	uxtb	r3, r3
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b01      	cmp	r3, #1
 8003068:	d102      	bne.n	8003070 <HAL_RCC_OscConfig+0x350>
 800306a:	4bbc      	ldr	r3, [pc, #752]	; (800335c <HAL_RCC_OscConfig+0x63c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	e013      	b.n	8003098 <HAL_RCC_OscConfig+0x378>
 8003070:	2302      	movs	r3, #2
 8003072:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003082:	2302      	movs	r3, #2
 8003084:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003088:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800308c:	fa93 f3a3 	rbit	r3, r3
 8003090:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003094:	4bb1      	ldr	r3, [pc, #708]	; (800335c <HAL_RCC_OscConfig+0x63c>)
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	2202      	movs	r2, #2
 800309a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800309e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80030a2:	fa92 f2a2 	rbit	r2, r2
 80030a6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80030aa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80030ae:	fab2 f282 	clz	r2, r2
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	f042 0220 	orr.w	r2, r2, #32
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	f002 021f 	and.w	r2, r2, #31
 80030be:	2101      	movs	r1, #1
 80030c0:	fa01 f202 	lsl.w	r2, r1, r2
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d007      	beq.n	80030da <HAL_RCC_OscConfig+0x3ba>
 80030ca:	1d3b      	adds	r3, r7, #4
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d002      	beq.n	80030da <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	f000 bd31 	b.w	8003b3c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030da:	4ba0      	ldr	r3, [pc, #640]	; (800335c <HAL_RCC_OscConfig+0x63c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e2:	1d3b      	adds	r3, r7, #4
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	21f8      	movs	r1, #248	; 0xf8
 80030ea:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80030f2:	fa91 f1a1 	rbit	r1, r1
 80030f6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80030fa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80030fe:	fab1 f181 	clz	r1, r1
 8003102:	b2c9      	uxtb	r1, r1
 8003104:	408b      	lsls	r3, r1
 8003106:	4995      	ldr	r1, [pc, #596]	; (800335c <HAL_RCC_OscConfig+0x63c>)
 8003108:	4313      	orrs	r3, r2
 800310a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800310c:	e0f5      	b.n	80032fa <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800310e:	1d3b      	adds	r3, r7, #4
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8085 	beq.w	8003224 <HAL_RCC_OscConfig+0x504>
 800311a:	2301      	movs	r3, #1
 800311c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003120:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003124:	fa93 f3a3 	rbit	r3, r3
 8003128:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800312c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003130:	fab3 f383 	clz	r3, r3
 8003134:	b2db      	uxtb	r3, r3
 8003136:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800313a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	461a      	mov	r2, r3
 8003142:	2301      	movs	r3, #1
 8003144:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003146:	f7fe fdb9 	bl	8001cbc <HAL_GetTick>
 800314a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314e:	e00a      	b.n	8003166 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003150:	f7fe fdb4 	bl	8001cbc <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d902      	bls.n	8003166 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	f000 bceb 	b.w	8003b3c <HAL_RCC_OscConfig+0xe1c>
 8003166:	2302      	movs	r3, #2
 8003168:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003170:	fa93 f3a3 	rbit	r3, r3
 8003174:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003178:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317c:	fab3 f383 	clz	r3, r3
 8003180:	b2db      	uxtb	r3, r3
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	b2db      	uxtb	r3, r3
 8003186:	f043 0301 	orr.w	r3, r3, #1
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b01      	cmp	r3, #1
 800318e:	d102      	bne.n	8003196 <HAL_RCC_OscConfig+0x476>
 8003190:	4b72      	ldr	r3, [pc, #456]	; (800335c <HAL_RCC_OscConfig+0x63c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	e013      	b.n	80031be <HAL_RCC_OscConfig+0x49e>
 8003196:	2302      	movs	r3, #2
 8003198:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80031a0:	fa93 f3a3 	rbit	r3, r3
 80031a4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80031a8:	2302      	movs	r3, #2
 80031aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80031ae:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80031b2:	fa93 f3a3 	rbit	r3, r3
 80031b6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80031ba:	4b68      	ldr	r3, [pc, #416]	; (800335c <HAL_RCC_OscConfig+0x63c>)
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	2202      	movs	r2, #2
 80031c0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80031c4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80031c8:	fa92 f2a2 	rbit	r2, r2
 80031cc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80031d0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80031d4:	fab2 f282 	clz	r2, r2
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	f042 0220 	orr.w	r2, r2, #32
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	f002 021f 	and.w	r2, r2, #31
 80031e4:	2101      	movs	r1, #1
 80031e6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0af      	beq.n	8003150 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f0:	4b5a      	ldr	r3, [pc, #360]	; (800335c <HAL_RCC_OscConfig+0x63c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f8:	1d3b      	adds	r3, r7, #4
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	21f8      	movs	r1, #248	; 0xf8
 8003200:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003208:	fa91 f1a1 	rbit	r1, r1
 800320c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003210:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003214:	fab1 f181 	clz	r1, r1
 8003218:	b2c9      	uxtb	r1, r1
 800321a:	408b      	lsls	r3, r1
 800321c:	494f      	ldr	r1, [pc, #316]	; (800335c <HAL_RCC_OscConfig+0x63c>)
 800321e:	4313      	orrs	r3, r2
 8003220:	600b      	str	r3, [r1, #0]
 8003222:	e06a      	b.n	80032fa <HAL_RCC_OscConfig+0x5da>
 8003224:	2301      	movs	r3, #1
 8003226:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003236:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800323a:	fab3 f383 	clz	r3, r3
 800323e:	b2db      	uxtb	r3, r3
 8003240:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003244:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	461a      	mov	r2, r3
 800324c:	2300      	movs	r3, #0
 800324e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003250:	f7fe fd34 	bl	8001cbc <HAL_GetTick>
 8003254:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003258:	e00a      	b.n	8003270 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800325a:	f7fe fd2f 	bl	8001cbc <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d902      	bls.n	8003270 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	f000 bc66 	b.w	8003b3c <HAL_RCC_OscConfig+0xe1c>
 8003270:	2302      	movs	r3, #2
 8003272:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003282:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003286:	fab3 f383 	clz	r3, r3
 800328a:	b2db      	uxtb	r3, r3
 800328c:	095b      	lsrs	r3, r3, #5
 800328e:	b2db      	uxtb	r3, r3
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b01      	cmp	r3, #1
 8003298:	d102      	bne.n	80032a0 <HAL_RCC_OscConfig+0x580>
 800329a:	4b30      	ldr	r3, [pc, #192]	; (800335c <HAL_RCC_OscConfig+0x63c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	e013      	b.n	80032c8 <HAL_RCC_OscConfig+0x5a8>
 80032a0:	2302      	movs	r3, #2
 80032a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80032aa:	fa93 f3a3 	rbit	r3, r3
 80032ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80032b2:	2302      	movs	r3, #2
 80032b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80032b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80032bc:	fa93 f3a3 	rbit	r3, r3
 80032c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80032c4:	4b25      	ldr	r3, [pc, #148]	; (800335c <HAL_RCC_OscConfig+0x63c>)
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	2202      	movs	r2, #2
 80032ca:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80032ce:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80032d2:	fa92 f2a2 	rbit	r2, r2
 80032d6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80032da:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80032de:	fab2 f282 	clz	r2, r2
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	f042 0220 	orr.w	r2, r2, #32
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	f002 021f 	and.w	r2, r2, #31
 80032ee:	2101      	movs	r1, #1
 80032f0:	fa01 f202 	lsl.w	r2, r1, r2
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1af      	bne.n	800325a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032fa:	1d3b      	adds	r3, r7, #4
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80da 	beq.w	80034be <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800330a:	1d3b      	adds	r3, r7, #4
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d069      	beq.n	80033e8 <HAL_RCC_OscConfig+0x6c8>
 8003314:	2301      	movs	r3, #1
 8003316:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003326:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	461a      	mov	r2, r3
 8003332:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <HAL_RCC_OscConfig+0x640>)
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	461a      	mov	r2, r3
 800333a:	2301      	movs	r3, #1
 800333c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333e:	f7fe fcbd 	bl	8001cbc <HAL_GetTick>
 8003342:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003346:	e00d      	b.n	8003364 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003348:	f7fe fcb8 	bl	8001cbc <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d905      	bls.n	8003364 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e3ef      	b.n	8003b3c <HAL_RCC_OscConfig+0xe1c>
 800335c:	40021000 	.word	0x40021000
 8003360:	10908120 	.word	0x10908120
 8003364:	2302      	movs	r3, #2
 8003366:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800336e:	fa93 f2a3 	rbit	r2, r3
 8003372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800337c:	2202      	movs	r2, #2
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	fa93 f2a3 	rbit	r2, r3
 800338a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003394:	2202      	movs	r2, #2
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	fa93 f2a3 	rbit	r2, r3
 80033a2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80033a6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a8:	4ba4      	ldr	r3, [pc, #656]	; (800363c <HAL_RCC_OscConfig+0x91c>)
 80033aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033ac:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80033b0:	2102      	movs	r1, #2
 80033b2:	6019      	str	r1, [r3, #0]
 80033b4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	fa93 f1a3 	rbit	r1, r3
 80033be:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80033c2:	6019      	str	r1, [r3, #0]
  return result;
 80033c4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	fab3 f383 	clz	r3, r3
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	f003 031f 	and.w	r3, r3, #31
 80033da:	2101      	movs	r1, #1
 80033dc:	fa01 f303 	lsl.w	r3, r1, r3
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0b0      	beq.n	8003348 <HAL_RCC_OscConfig+0x628>
 80033e6:	e06a      	b.n	80034be <HAL_RCC_OscConfig+0x79e>
 80033e8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80033ec:	2201      	movs	r2, #1
 80033ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	fa93 f2a3 	rbit	r2, r3
 80033fa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80033fe:	601a      	str	r2, [r3, #0]
  return result;
 8003400:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003404:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	4b8c      	ldr	r3, [pc, #560]	; (8003640 <HAL_RCC_OscConfig+0x920>)
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	461a      	mov	r2, r3
 8003416:	2300      	movs	r3, #0
 8003418:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341a:	f7fe fc4f 	bl	8001cbc <HAL_GetTick>
 800341e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003422:	e009      	b.n	8003438 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003424:	f7fe fc4a 	bl	8001cbc <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e381      	b.n	8003b3c <HAL_RCC_OscConfig+0xe1c>
 8003438:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800343c:	2202      	movs	r2, #2
 800343e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	fa93 f2a3 	rbit	r2, r3
 800344a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003454:	2202      	movs	r2, #2
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	fa93 f2a3 	rbit	r2, r3
 8003462:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800346c:	2202      	movs	r2, #2
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	fa93 f2a3 	rbit	r2, r3
 800347a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800347e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003480:	4b6e      	ldr	r3, [pc, #440]	; (800363c <HAL_RCC_OscConfig+0x91c>)
 8003482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003484:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003488:	2102      	movs	r1, #2
 800348a:	6019      	str	r1, [r3, #0]
 800348c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	fa93 f1a3 	rbit	r1, r3
 8003496:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800349a:	6019      	str	r1, [r3, #0]
  return result;
 800349c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	fab3 f383 	clz	r3, r3
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	f003 031f 	and.w	r3, r3, #31
 80034b2:	2101      	movs	r1, #1
 80034b4:	fa01 f303 	lsl.w	r3, r1, r3
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1b2      	bne.n	8003424 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034be:	1d3b      	adds	r3, r7, #4
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 8157 	beq.w	800377c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ce:	2300      	movs	r3, #0
 80034d0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034d4:	4b59      	ldr	r3, [pc, #356]	; (800363c <HAL_RCC_OscConfig+0x91c>)
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d112      	bne.n	8003506 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e0:	4b56      	ldr	r3, [pc, #344]	; (800363c <HAL_RCC_OscConfig+0x91c>)
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	4a55      	ldr	r2, [pc, #340]	; (800363c <HAL_RCC_OscConfig+0x91c>)
 80034e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ea:	61d3      	str	r3, [r2, #28]
 80034ec:	4b53      	ldr	r3, [pc, #332]	; (800363c <HAL_RCC_OscConfig+0x91c>)
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80034f4:	f107 030c 	add.w	r3, r7, #12
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	f107 030c 	add.w	r3, r7, #12
 80034fe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003500:	2301      	movs	r3, #1
 8003502:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003506:	4b4f      	ldr	r3, [pc, #316]	; (8003644 <HAL_RCC_OscConfig+0x924>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350e:	2b00      	cmp	r3, #0
 8003510:	d11a      	bne.n	8003548 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003512:	4b4c      	ldr	r3, [pc, #304]	; (8003644 <HAL_RCC_OscConfig+0x924>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a4b      	ldr	r2, [pc, #300]	; (8003644 <HAL_RCC_OscConfig+0x924>)
 8003518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800351c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800351e:	f7fe fbcd 	bl	8001cbc <HAL_GetTick>
 8003522:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003526:	e009      	b.n	800353c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003528:	f7fe fbc8 	bl	8001cbc <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b64      	cmp	r3, #100	; 0x64
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e2ff      	b.n	8003b3c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353c:	4b41      	ldr	r3, [pc, #260]	; (8003644 <HAL_RCC_OscConfig+0x924>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0ef      	beq.n	8003528 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003548:	1d3b      	adds	r3, r7, #4
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d106      	bne.n	8003560 <HAL_RCC_OscConfig+0x840>
 8003552:	4b3a      	ldr	r3, [pc, #232]	; (800363c <HAL_RCC_OscConfig+0x91c>)
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	4a39      	ldr	r2, [pc, #228]	; (800363c <HAL_RCC_OscConfig+0x91c>)
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	6213      	str	r3, [r2, #32]
 800355e:	e02f      	b.n	80035c0 <HAL_RCC_OscConfig+0x8a0>
 8003560:	1d3b      	adds	r3, r7, #4
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10c      	bne.n	8003584 <HAL_RCC_OscConfig+0x864>
 800356a:	4b34      	ldr	r3, [pc, #208]	; (800363c <HAL_RCC_OscConfig+0x91c>)
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	4a33      	ldr	r2, [pc, #204]	; (800363c <HAL_RCC_OscConfig+0x91c>)
 8003570:	f023 0301 	bic.w	r3, r3, #1
 8003574:	6213      	str	r3, [r2, #32]
 8003576:	4b31      	ldr	r3, [pc, #196]	; (800363c <HAL_RCC_OscConfig+0x91c>)
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	4a30      	ldr	r2, [pc, #192]	; (800363c <HAL_RCC_OscConfig+0x91c>)
 800357c:	f023 0304 	bic.w	r3, r3, #4
 8003580:	6213      	str	r3, [r2, #32]
 8003582:	e01d      	b.n	80035c0 <HAL_RCC_OscConfig+0x8a0>
 8003584:	1d3b      	adds	r3, r7, #4
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2b05      	cmp	r3, #5
 800358c:	d10c      	bne.n	80035a8 <HAL_RCC_OscConfig+0x888>
 800358e:	4b2b      	ldr	r3, [pc, #172]	; (800363c <HAL_RCC_OscConfig+0x91c>)
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	4a2a      	ldr	r2, [pc, #168]	; (800363c <HAL_RCC_OscConfig+0x91c>)
 8003594:	f043 0304 	orr.w	r3, r3, #4
 8003598:	6213      	str	r3, [r2, #32]
 800359a:	4b28      	ldr	r3, [pc, #160]	; (800363c <HAL_RCC_OscConfig+0x91c>)
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	4a27      	ldr	r2, [pc, #156]	; (800363c <HAL_RCC_OscConfig+0x91c>)
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	6213      	str	r3, [r2, #32]
 80035a6:	e00b      	b.n	80035c0 <HAL_RCC_OscConfig+0x8a0>
 80035a8:	4b24      	ldr	r3, [pc, #144]	; (800363c <HAL_RCC_OscConfig+0x91c>)
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	4a23      	ldr	r2, [pc, #140]	; (800363c <HAL_RCC_OscConfig+0x91c>)
 80035ae:	f023 0301 	bic.w	r3, r3, #1
 80035b2:	6213      	str	r3, [r2, #32]
 80035b4:	4b21      	ldr	r3, [pc, #132]	; (800363c <HAL_RCC_OscConfig+0x91c>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	4a20      	ldr	r2, [pc, #128]	; (800363c <HAL_RCC_OscConfig+0x91c>)
 80035ba:	f023 0304 	bic.w	r3, r3, #4
 80035be:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035c0:	1d3b      	adds	r3, r7, #4
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d06a      	beq.n	80036a0 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ca:	f7fe fb77 	bl	8001cbc <HAL_GetTick>
 80035ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d2:	e00b      	b.n	80035ec <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d4:	f7fe fb72 	bl	8001cbc <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e2a7      	b.n	8003b3c <HAL_RCC_OscConfig+0xe1c>
 80035ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80035f0:	2202      	movs	r2, #2
 80035f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	fa93 f2a3 	rbit	r2, r3
 80035fe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003608:	2202      	movs	r2, #2
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	fa93 f2a3 	rbit	r2, r3
 8003616:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800361a:	601a      	str	r2, [r3, #0]
  return result;
 800361c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003620:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003622:	fab3 f383 	clz	r3, r3
 8003626:	b2db      	uxtb	r3, r3
 8003628:	095b      	lsrs	r3, r3, #5
 800362a:	b2db      	uxtb	r3, r3
 800362c:	f043 0302 	orr.w	r3, r3, #2
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d108      	bne.n	8003648 <HAL_RCC_OscConfig+0x928>
 8003636:	4b01      	ldr	r3, [pc, #4]	; (800363c <HAL_RCC_OscConfig+0x91c>)
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	e013      	b.n	8003664 <HAL_RCC_OscConfig+0x944>
 800363c:	40021000 	.word	0x40021000
 8003640:	10908120 	.word	0x10908120
 8003644:	40007000 	.word	0x40007000
 8003648:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800364c:	2202      	movs	r2, #2
 800364e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003650:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	fa93 f2a3 	rbit	r2, r3
 800365a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	4bc0      	ldr	r3, [pc, #768]	; (8003964 <HAL_RCC_OscConfig+0xc44>)
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003668:	2102      	movs	r1, #2
 800366a:	6011      	str	r1, [r2, #0]
 800366c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003670:	6812      	ldr	r2, [r2, #0]
 8003672:	fa92 f1a2 	rbit	r1, r2
 8003676:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800367a:	6011      	str	r1, [r2, #0]
  return result;
 800367c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	fab2 f282 	clz	r2, r2
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	f002 021f 	and.w	r2, r2, #31
 8003692:	2101      	movs	r1, #1
 8003694:	fa01 f202 	lsl.w	r2, r1, r2
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d09a      	beq.n	80035d4 <HAL_RCC_OscConfig+0x8b4>
 800369e:	e063      	b.n	8003768 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a0:	f7fe fb0c 	bl	8001cbc <HAL_GetTick>
 80036a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a8:	e00b      	b.n	80036c2 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036aa:	f7fe fb07 	bl	8001cbc <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e23c      	b.n	8003b3c <HAL_RCC_OscConfig+0xe1c>
 80036c2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036c6:	2202      	movs	r2, #2
 80036c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	fa93 f2a3 	rbit	r2, r3
 80036d4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036de:	2202      	movs	r2, #2
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	fa93 f2a3 	rbit	r2, r3
 80036ec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80036f0:	601a      	str	r2, [r3, #0]
  return result;
 80036f2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80036f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f8:	fab3 f383 	clz	r3, r3
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	b2db      	uxtb	r3, r3
 8003702:	f043 0302 	orr.w	r3, r3, #2
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d102      	bne.n	8003712 <HAL_RCC_OscConfig+0x9f2>
 800370c:	4b95      	ldr	r3, [pc, #596]	; (8003964 <HAL_RCC_OscConfig+0xc44>)
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	e00d      	b.n	800372e <HAL_RCC_OscConfig+0xa0e>
 8003712:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003716:	2202      	movs	r2, #2
 8003718:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	fa93 f2a3 	rbit	r2, r3
 8003724:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	4b8e      	ldr	r3, [pc, #568]	; (8003964 <HAL_RCC_OscConfig+0xc44>)
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003732:	2102      	movs	r1, #2
 8003734:	6011      	str	r1, [r2, #0]
 8003736:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800373a:	6812      	ldr	r2, [r2, #0]
 800373c:	fa92 f1a2 	rbit	r1, r2
 8003740:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003744:	6011      	str	r1, [r2, #0]
  return result;
 8003746:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800374a:	6812      	ldr	r2, [r2, #0]
 800374c:	fab2 f282 	clz	r2, r2
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	f002 021f 	and.w	r2, r2, #31
 800375c:	2101      	movs	r1, #1
 800375e:	fa01 f202 	lsl.w	r2, r1, r2
 8003762:	4013      	ands	r3, r2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1a0      	bne.n	80036aa <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003768:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800376c:	2b01      	cmp	r3, #1
 800376e:	d105      	bne.n	800377c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003770:	4b7c      	ldr	r3, [pc, #496]	; (8003964 <HAL_RCC_OscConfig+0xc44>)
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	4a7b      	ldr	r2, [pc, #492]	; (8003964 <HAL_RCC_OscConfig+0xc44>)
 8003776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800377a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800377c:	1d3b      	adds	r3, r7, #4
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 81d9 	beq.w	8003b3a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003788:	4b76      	ldr	r3, [pc, #472]	; (8003964 <HAL_RCC_OscConfig+0xc44>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 030c 	and.w	r3, r3, #12
 8003790:	2b08      	cmp	r3, #8
 8003792:	f000 81a6 	beq.w	8003ae2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003796:	1d3b      	adds	r3, r7, #4
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	2b02      	cmp	r3, #2
 800379e:	f040 811e 	bne.w	80039de <HAL_RCC_OscConfig+0xcbe>
 80037a2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80037a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ac:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	fa93 f2a3 	rbit	r2, r3
 80037b6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80037ba:	601a      	str	r2, [r3, #0]
  return result;
 80037bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80037c0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	461a      	mov	r2, r3
 80037d4:	2300      	movs	r3, #0
 80037d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d8:	f7fe fa70 	bl	8001cbc <HAL_GetTick>
 80037dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e0:	e009      	b.n	80037f6 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e2:	f7fe fa6b 	bl	8001cbc <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e1a2      	b.n	8003b3c <HAL_RCC_OscConfig+0xe1c>
 80037f6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80037fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003800:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	fa93 f2a3 	rbit	r2, r3
 800380a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800380e:	601a      	str	r2, [r3, #0]
  return result;
 8003810:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003814:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003816:	fab3 f383 	clz	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	095b      	lsrs	r3, r3, #5
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b01      	cmp	r3, #1
 8003828:	d102      	bne.n	8003830 <HAL_RCC_OscConfig+0xb10>
 800382a:	4b4e      	ldr	r3, [pc, #312]	; (8003964 <HAL_RCC_OscConfig+0xc44>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	e01b      	b.n	8003868 <HAL_RCC_OscConfig+0xb48>
 8003830:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003834:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003838:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	fa93 f2a3 	rbit	r2, r3
 8003844:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800384e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	fa93 f2a3 	rbit	r2, r3
 800385e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	4b3f      	ldr	r3, [pc, #252]	; (8003964 <HAL_RCC_OscConfig+0xc44>)
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800386c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003870:	6011      	str	r1, [r2, #0]
 8003872:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	fa92 f1a2 	rbit	r1, r2
 800387c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003880:	6011      	str	r1, [r2, #0]
  return result;
 8003882:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	fab2 f282 	clz	r2, r2
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	f042 0220 	orr.w	r2, r2, #32
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	f002 021f 	and.w	r2, r2, #31
 8003898:	2101      	movs	r1, #1
 800389a:	fa01 f202 	lsl.w	r2, r1, r2
 800389e:	4013      	ands	r3, r2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d19e      	bne.n	80037e2 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038a4:	4b2f      	ldr	r3, [pc, #188]	; (8003964 <HAL_RCC_OscConfig+0xc44>)
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	f023 020f 	bic.w	r2, r3, #15
 80038ac:	1d3b      	adds	r3, r7, #4
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	492c      	ldr	r1, [pc, #176]	; (8003964 <HAL_RCC_OscConfig+0xc44>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80038b8:	4b2a      	ldr	r3, [pc, #168]	; (8003964 <HAL_RCC_OscConfig+0xc44>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80038c0:	1d3b      	adds	r3, r7, #4
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6a19      	ldr	r1, [r3, #32]
 80038c6:	1d3b      	adds	r3, r7, #4
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	430b      	orrs	r3, r1
 80038ce:	4925      	ldr	r1, [pc, #148]	; (8003964 <HAL_RCC_OscConfig+0xc44>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	604b      	str	r3, [r1, #4]
 80038d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80038d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	fa93 f2a3 	rbit	r2, r3
 80038e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038ec:	601a      	str	r2, [r3, #0]
  return result;
 80038ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038f2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f4:	fab3 f383 	clz	r3, r3
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	461a      	mov	r2, r3
 8003906:	2301      	movs	r3, #1
 8003908:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390a:	f7fe f9d7 	bl	8001cbc <HAL_GetTick>
 800390e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003912:	e009      	b.n	8003928 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003914:	f7fe f9d2 	bl	8001cbc <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e109      	b.n	8003b3c <HAL_RCC_OscConfig+0xe1c>
 8003928:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800392c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003930:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003932:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	fa93 f2a3 	rbit	r2, r3
 800393c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003940:	601a      	str	r2, [r3, #0]
  return result;
 8003942:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003946:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003948:	fab3 f383 	clz	r3, r3
 800394c:	b2db      	uxtb	r3, r3
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	b2db      	uxtb	r3, r3
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b01      	cmp	r3, #1
 800395a:	d105      	bne.n	8003968 <HAL_RCC_OscConfig+0xc48>
 800395c:	4b01      	ldr	r3, [pc, #4]	; (8003964 <HAL_RCC_OscConfig+0xc44>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	e01e      	b.n	80039a0 <HAL_RCC_OscConfig+0xc80>
 8003962:	bf00      	nop
 8003964:	40021000 	.word	0x40021000
 8003968:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800396c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003970:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003972:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	fa93 f2a3 	rbit	r2, r3
 800397c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003986:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	fa93 f2a3 	rbit	r2, r3
 8003996:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	4b6a      	ldr	r3, [pc, #424]	; (8003b48 <HAL_RCC_OscConfig+0xe28>)
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80039a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80039a8:	6011      	str	r1, [r2, #0]
 80039aa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	fa92 f1a2 	rbit	r1, r2
 80039b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80039b8:	6011      	str	r1, [r2, #0]
  return result;
 80039ba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	fab2 f282 	clz	r2, r2
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	f042 0220 	orr.w	r2, r2, #32
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	f002 021f 	and.w	r2, r2, #31
 80039d0:	2101      	movs	r1, #1
 80039d2:	fa01 f202 	lsl.w	r2, r1, r2
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d09b      	beq.n	8003914 <HAL_RCC_OscConfig+0xbf4>
 80039dc:	e0ad      	b.n	8003b3a <HAL_RCC_OscConfig+0xe1a>
 80039de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	fa93 f2a3 	rbit	r2, r3
 80039f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039f6:	601a      	str	r2, [r3, #0]
  return result;
 80039f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039fc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fe:	fab3 f383 	clz	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	461a      	mov	r2, r3
 8003a10:	2300      	movs	r3, #0
 8003a12:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a14:	f7fe f952 	bl	8001cbc <HAL_GetTick>
 8003a18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a1c:	e009      	b.n	8003a32 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a1e:	f7fe f94d 	bl	8001cbc <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e084      	b.n	8003b3c <HAL_RCC_OscConfig+0xe1c>
 8003a32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	fa93 f2a3 	rbit	r2, r3
 8003a46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a4a:	601a      	str	r2, [r3, #0]
  return result;
 8003a4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a52:	fab3 f383 	clz	r3, r3
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	095b      	lsrs	r3, r3, #5
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d102      	bne.n	8003a6c <HAL_RCC_OscConfig+0xd4c>
 8003a66:	4b38      	ldr	r3, [pc, #224]	; (8003b48 <HAL_RCC_OscConfig+0xe28>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	e01b      	b.n	8003aa4 <HAL_RCC_OscConfig+0xd84>
 8003a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	fa93 f2a3 	rbit	r2, r3
 8003a80:	f107 0320 	add.w	r3, r7, #32
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	f107 031c 	add.w	r3, r7, #28
 8003a8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	f107 031c 	add.w	r3, r7, #28
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	fa93 f2a3 	rbit	r2, r3
 8003a9a:	f107 0318 	add.w	r3, r7, #24
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	4b29      	ldr	r3, [pc, #164]	; (8003b48 <HAL_RCC_OscConfig+0xe28>)
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	f107 0214 	add.w	r2, r7, #20
 8003aa8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003aac:	6011      	str	r1, [r2, #0]
 8003aae:	f107 0214 	add.w	r2, r7, #20
 8003ab2:	6812      	ldr	r2, [r2, #0]
 8003ab4:	fa92 f1a2 	rbit	r1, r2
 8003ab8:	f107 0210 	add.w	r2, r7, #16
 8003abc:	6011      	str	r1, [r2, #0]
  return result;
 8003abe:	f107 0210 	add.w	r2, r7, #16
 8003ac2:	6812      	ldr	r2, [r2, #0]
 8003ac4:	fab2 f282 	clz	r2, r2
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	f042 0220 	orr.w	r2, r2, #32
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	f002 021f 	and.w	r2, r2, #31
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8003ada:	4013      	ands	r3, r2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d19e      	bne.n	8003a1e <HAL_RCC_OscConfig+0xcfe>
 8003ae0:	e02b      	b.n	8003b3a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ae2:	1d3b      	adds	r3, r7, #4
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e025      	b.n	8003b3c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003af0:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <HAL_RCC_OscConfig+0xe28>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003af8:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <HAL_RCC_OscConfig+0xe28>)
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003b04:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003b08:	1d3b      	adds	r3, r7, #4
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d111      	bne.n	8003b36 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003b12:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003b16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b1a:	1d3b      	adds	r3, r7, #4
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d108      	bne.n	8003b36 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003b24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b28:	f003 020f 	and.w	r2, r3, #15
 8003b2c:	1d3b      	adds	r3, r7, #4
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d001      	beq.n	8003b3a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40021000 	.word	0x40021000

08003b4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b09e      	sub	sp, #120	; 0x78
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e162      	b.n	8003e2a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b64:	4b90      	ldr	r3, [pc, #576]	; (8003da8 <HAL_RCC_ClockConfig+0x25c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d910      	bls.n	8003b94 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b72:	4b8d      	ldr	r3, [pc, #564]	; (8003da8 <HAL_RCC_ClockConfig+0x25c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f023 0207 	bic.w	r2, r3, #7
 8003b7a:	498b      	ldr	r1, [pc, #556]	; (8003da8 <HAL_RCC_ClockConfig+0x25c>)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b82:	4b89      	ldr	r3, [pc, #548]	; (8003da8 <HAL_RCC_ClockConfig+0x25c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e14a      	b.n	8003e2a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba0:	4b82      	ldr	r3, [pc, #520]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	497f      	ldr	r1, [pc, #508]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 80dc 	beq.w	8003d78 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d13c      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xf6>
 8003bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bcc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bd0:	fa93 f3a3 	rbit	r3, r3
 8003bd4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd8:	fab3 f383 	clz	r3, r3
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d102      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xa6>
 8003bec:	4b6f      	ldr	r3, [pc, #444]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	e00f      	b.n	8003c12 <HAL_RCC_ClockConfig+0xc6>
 8003bf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bf6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bfa:	fa93 f3a3 	rbit	r3, r3
 8003bfe:	667b      	str	r3, [r7, #100]	; 0x64
 8003c00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c04:	663b      	str	r3, [r7, #96]	; 0x60
 8003c06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c08:	fa93 f3a3 	rbit	r3, r3
 8003c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c0e:	4b67      	ldr	r3, [pc, #412]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c16:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c1a:	fa92 f2a2 	rbit	r2, r2
 8003c1e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003c20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c22:	fab2 f282 	clz	r2, r2
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	f042 0220 	orr.w	r2, r2, #32
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	f002 021f 	and.w	r2, r2, #31
 8003c32:	2101      	movs	r1, #1
 8003c34:	fa01 f202 	lsl.w	r2, r1, r2
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d17b      	bne.n	8003d36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e0f3      	b.n	8003e2a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d13c      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0x178>
 8003c4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c4e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c52:	fa93 f3a3 	rbit	r3, r3
 8003c56:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5a:	fab3 f383 	clz	r3, r3
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	095b      	lsrs	r3, r3, #5
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d102      	bne.n	8003c74 <HAL_RCC_ClockConfig+0x128>
 8003c6e:	4b4f      	ldr	r3, [pc, #316]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	e00f      	b.n	8003c94 <HAL_RCC_ClockConfig+0x148>
 8003c74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c78:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c7c:	fa93 f3a3 	rbit	r3, r3
 8003c80:	647b      	str	r3, [r7, #68]	; 0x44
 8003c82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c86:	643b      	str	r3, [r7, #64]	; 0x40
 8003c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c8a:	fa93 f3a3 	rbit	r3, r3
 8003c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c90:	4b46      	ldr	r3, [pc, #280]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c98:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c9c:	fa92 f2a2 	rbit	r2, r2
 8003ca0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ca4:	fab2 f282 	clz	r2, r2
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	f042 0220 	orr.w	r2, r2, #32
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	f002 021f 	and.w	r2, r2, #31
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cba:	4013      	ands	r3, r2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d13a      	bne.n	8003d36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0b2      	b.n	8003e2a <HAL_RCC_ClockConfig+0x2de>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cca:	fa93 f3a3 	rbit	r3, r3
 8003cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd2:	fab3 f383 	clz	r3, r3
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	095b      	lsrs	r3, r3, #5
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d102      	bne.n	8003cec <HAL_RCC_ClockConfig+0x1a0>
 8003ce6:	4b31      	ldr	r3, [pc, #196]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	e00d      	b.n	8003d08 <HAL_RCC_ClockConfig+0x1bc>
 8003cec:	2302      	movs	r3, #2
 8003cee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf2:	fa93 f3a3 	rbit	r3, r3
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	623b      	str	r3, [r7, #32]
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	fa93 f3a3 	rbit	r3, r3
 8003d02:	61fb      	str	r3, [r7, #28]
 8003d04:	4b29      	ldr	r3, [pc, #164]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	2202      	movs	r2, #2
 8003d0a:	61ba      	str	r2, [r7, #24]
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	fa92 f2a2 	rbit	r2, r2
 8003d12:	617a      	str	r2, [r7, #20]
  return result;
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	fab2 f282 	clz	r2, r2
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	f042 0220 	orr.w	r2, r2, #32
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	f002 021f 	and.w	r2, r2, #31
 8003d26:	2101      	movs	r1, #1
 8003d28:	fa01 f202 	lsl.w	r2, r1, r2
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e079      	b.n	8003e2a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d36:	4b1d      	ldr	r3, [pc, #116]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f023 0203 	bic.w	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	491a      	ldr	r1, [pc, #104]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d48:	f7fd ffb8 	bl	8001cbc <HAL_GetTick>
 8003d4c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4e:	e00a      	b.n	8003d66 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d50:	f7fd ffb4 	bl	8001cbc <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e061      	b.n	8003e2a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d66:	4b11      	ldr	r3, [pc, #68]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f003 020c 	and.w	r2, r3, #12
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d1eb      	bne.n	8003d50 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <HAL_RCC_ClockConfig+0x25c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d214      	bcs.n	8003db0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d86:	4b08      	ldr	r3, [pc, #32]	; (8003da8 <HAL_RCC_ClockConfig+0x25c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f023 0207 	bic.w	r2, r3, #7
 8003d8e:	4906      	ldr	r1, [pc, #24]	; (8003da8 <HAL_RCC_ClockConfig+0x25c>)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d96:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <HAL_RCC_ClockConfig+0x25c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d005      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e040      	b.n	8003e2a <HAL_RCC_ClockConfig+0x2de>
 8003da8:	40022000 	.word	0x40022000
 8003dac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d008      	beq.n	8003dce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dbc:	4b1d      	ldr	r3, [pc, #116]	; (8003e34 <HAL_RCC_ClockConfig+0x2e8>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	491a      	ldr	r1, [pc, #104]	; (8003e34 <HAL_RCC_ClockConfig+0x2e8>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dda:	4b16      	ldr	r3, [pc, #88]	; (8003e34 <HAL_RCC_ClockConfig+0x2e8>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4912      	ldr	r1, [pc, #72]	; (8003e34 <HAL_RCC_ClockConfig+0x2e8>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003dee:	f000 f829 	bl	8003e44 <HAL_RCC_GetSysClockFreq>
 8003df2:	4601      	mov	r1, r0
 8003df4:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <HAL_RCC_ClockConfig+0x2e8>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dfc:	22f0      	movs	r2, #240	; 0xf0
 8003dfe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	fa92 f2a2 	rbit	r2, r2
 8003e06:	60fa      	str	r2, [r7, #12]
  return result;
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	fab2 f282 	clz	r2, r2
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	40d3      	lsrs	r3, r2
 8003e12:	4a09      	ldr	r2, [pc, #36]	; (8003e38 <HAL_RCC_ClockConfig+0x2ec>)
 8003e14:	5cd3      	ldrb	r3, [r2, r3]
 8003e16:	fa21 f303 	lsr.w	r3, r1, r3
 8003e1a:	4a08      	ldr	r2, [pc, #32]	; (8003e3c <HAL_RCC_ClockConfig+0x2f0>)
 8003e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e1e:	4b08      	ldr	r3, [pc, #32]	; (8003e40 <HAL_RCC_ClockConfig+0x2f4>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fd ff06 	bl	8001c34 <HAL_InitTick>
  
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3778      	adds	r7, #120	; 0x78
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40021000 	.word	0x40021000
 8003e38:	08005528 	.word	0x08005528
 8003e3c:	20000004 	.word	0x20000004
 8003e40:	20000008 	.word	0x20000008

08003e44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b08b      	sub	sp, #44	; 0x2c
 8003e48:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61fb      	str	r3, [r7, #28]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	2300      	movs	r3, #0
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003e5e:	4b2a      	ldr	r3, [pc, #168]	; (8003f08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f003 030c 	and.w	r3, r3, #12
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d002      	beq.n	8003e74 <HAL_RCC_GetSysClockFreq+0x30>
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d003      	beq.n	8003e7a <HAL_RCC_GetSysClockFreq+0x36>
 8003e72:	e03f      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e74:	4b25      	ldr	r3, [pc, #148]	; (8003f0c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e76:	623b      	str	r3, [r7, #32]
      break;
 8003e78:	e03f      	b.n	8003efa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e80:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003e84:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	fa92 f2a2 	rbit	r2, r2
 8003e8c:	607a      	str	r2, [r7, #4]
  return result;
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	fab2 f282 	clz	r2, r2
 8003e94:	b2d2      	uxtb	r2, r2
 8003e96:	40d3      	lsrs	r3, r2
 8003e98:	4a1d      	ldr	r2, [pc, #116]	; (8003f10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e9a:	5cd3      	ldrb	r3, [r2, r3]
 8003e9c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e9e:	4b1a      	ldr	r3, [pc, #104]	; (8003f08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	220f      	movs	r2, #15
 8003ea8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	fa92 f2a2 	rbit	r2, r2
 8003eb0:	60fa      	str	r2, [r7, #12]
  return result;
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	fab2 f282 	clz	r2, r2
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	40d3      	lsrs	r3, r2
 8003ebc:	4a15      	ldr	r2, [pc, #84]	; (8003f14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ebe:	5cd3      	ldrb	r3, [r2, r3]
 8003ec0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ecc:	4a0f      	ldr	r2, [pc, #60]	; (8003f0c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	fb02 f303 	mul.w	r3, r2, r3
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24
 8003edc:	e007      	b.n	8003eee <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ede:	4a0b      	ldr	r2, [pc, #44]	; (8003f0c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	fb02 f303 	mul.w	r3, r2, r3
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	623b      	str	r3, [r7, #32]
      break;
 8003ef2:	e002      	b.n	8003efa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ef6:	623b      	str	r3, [r7, #32]
      break;
 8003ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003efa:	6a3b      	ldr	r3, [r7, #32]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	372c      	adds	r7, #44	; 0x2c
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	007a1200 	.word	0x007a1200
 8003f10:	08005540 	.word	0x08005540
 8003f14:	08005550 	.word	0x08005550

08003f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f1c:	4b03      	ldr	r3, [pc, #12]	; (8003f2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	20000004 	.word	0x20000004

08003f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003f36:	f7ff ffef 	bl	8003f18 <HAL_RCC_GetHCLKFreq>
 8003f3a:	4601      	mov	r1, r0
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f44:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003f48:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	fa92 f2a2 	rbit	r2, r2
 8003f50:	603a      	str	r2, [r7, #0]
  return result;
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	fab2 f282 	clz	r2, r2
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	40d3      	lsrs	r3, r2
 8003f5c:	4a04      	ldr	r2, [pc, #16]	; (8003f70 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003f5e:	5cd3      	ldrb	r3, [r2, r3]
 8003f60:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003f64:	4618      	mov	r0, r3
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	08005538 	.word	0x08005538

08003f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003f7a:	f7ff ffcd 	bl	8003f18 <HAL_RCC_GetHCLKFreq>
 8003f7e:	4601      	mov	r1, r0
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003f88:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003f8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	fa92 f2a2 	rbit	r2, r2
 8003f94:	603a      	str	r2, [r7, #0]
  return result;
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	fab2 f282 	clz	r2, r2
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	40d3      	lsrs	r3, r2
 8003fa0:	4a04      	ldr	r2, [pc, #16]	; (8003fb4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003fa2:	5cd3      	ldrb	r3, [r2, r3]
 8003fa4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	08005538 	.word	0x08005538

08003fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b092      	sub	sp, #72	; 0x48
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 80d7 	beq.w	8004184 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fdc:	4b4e      	ldr	r3, [pc, #312]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10e      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe8:	4b4b      	ldr	r3, [pc, #300]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	4a4a      	ldr	r2, [pc, #296]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	61d3      	str	r3, [r2, #28]
 8003ff4:	4b48      	ldr	r3, [pc, #288]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	60bb      	str	r3, [r7, #8]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004000:	2301      	movs	r3, #1
 8004002:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004006:	4b45      	ldr	r3, [pc, #276]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400e:	2b00      	cmp	r3, #0
 8004010:	d118      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004012:	4b42      	ldr	r3, [pc, #264]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a41      	ldr	r2, [pc, #260]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800401c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800401e:	f7fd fe4d 	bl	8001cbc <HAL_GetTick>
 8004022:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004024:	e008      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004026:	f7fd fe49 	bl	8001cbc <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b64      	cmp	r3, #100	; 0x64
 8004032:	d901      	bls.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e1d6      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004038:	4b38      	ldr	r3, [pc, #224]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0f0      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004044:	4b34      	ldr	r3, [pc, #208]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800404c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800404e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 8084 	beq.w	800415e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004060:	429a      	cmp	r2, r3
 8004062:	d07c      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004064:	4b2c      	ldr	r3, [pc, #176]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800406c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800406e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004072:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004076:	fa93 f3a3 	rbit	r3, r3
 800407a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800407c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800407e:	fab3 f383 	clz	r3, r3
 8004082:	b2db      	uxtb	r3, r3
 8004084:	461a      	mov	r2, r3
 8004086:	4b26      	ldr	r3, [pc, #152]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	461a      	mov	r2, r3
 800408e:	2301      	movs	r3, #1
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004096:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409a:	fa93 f3a3 	rbit	r3, r3
 800409e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80040a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040a2:	fab3 f383 	clz	r3, r3
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	461a      	mov	r2, r3
 80040aa:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	461a      	mov	r2, r3
 80040b2:	2300      	movs	r3, #0
 80040b4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040b6:	4a18      	ldr	r2, [pc, #96]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ba:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d04b      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c6:	f7fd fdf9 	bl	8001cbc <HAL_GetTick>
 80040ca:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040cc:	e00a      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ce:	f7fd fdf5 	bl	8001cbc <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040dc:	4293      	cmp	r3, r2
 80040de:	d901      	bls.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e180      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80040e4:	2302      	movs	r3, #2
 80040e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	fa93 f3a3 	rbit	r3, r3
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
 80040f0:	2302      	movs	r3, #2
 80040f2:	623b      	str	r3, [r7, #32]
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	fa93 f3a3 	rbit	r3, r3
 80040fa:	61fb      	str	r3, [r7, #28]
  return result;
 80040fc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040fe:	fab3 f383 	clz	r3, r3
 8004102:	b2db      	uxtb	r3, r3
 8004104:	095b      	lsrs	r3, r3, #5
 8004106:	b2db      	uxtb	r3, r3
 8004108:	f043 0302 	orr.w	r3, r3, #2
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d108      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004112:	4b01      	ldr	r3, [pc, #4]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	e00d      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004118:	40021000 	.word	0x40021000
 800411c:	40007000 	.word	0x40007000
 8004120:	10908100 	.word	0x10908100
 8004124:	2302      	movs	r3, #2
 8004126:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	fa93 f3a3 	rbit	r3, r3
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	4ba0      	ldr	r3, [pc, #640]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	2202      	movs	r2, #2
 8004136:	613a      	str	r2, [r7, #16]
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	fa92 f2a2 	rbit	r2, r2
 800413e:	60fa      	str	r2, [r7, #12]
  return result;
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	fab2 f282 	clz	r2, r2
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	f002 021f 	and.w	r2, r2, #31
 8004152:	2101      	movs	r1, #1
 8004154:	fa01 f202 	lsl.w	r2, r1, r2
 8004158:	4013      	ands	r3, r2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0b7      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800415e:	4b95      	ldr	r3, [pc, #596]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	4992      	ldr	r1, [pc, #584]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800416c:	4313      	orrs	r3, r2
 800416e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004170:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004174:	2b01      	cmp	r3, #1
 8004176:	d105      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004178:	4b8e      	ldr	r3, [pc, #568]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	4a8d      	ldr	r2, [pc, #564]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800417e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004182:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	d008      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004190:	4b88      	ldr	r3, [pc, #544]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004194:	f023 0203 	bic.w	r2, r3, #3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	4985      	ldr	r1, [pc, #532]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d008      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041ae:	4b81      	ldr	r3, [pc, #516]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	497e      	ldr	r1, [pc, #504]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d008      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041cc:	4b79      	ldr	r3, [pc, #484]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	4976      	ldr	r1, [pc, #472]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d008      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041ea:	4b72      	ldr	r3, [pc, #456]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	f023 0210 	bic.w	r2, r3, #16
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	496f      	ldr	r1, [pc, #444]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d008      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004208:	4b6a      	ldr	r3, [pc, #424]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004214:	4967      	ldr	r1, [pc, #412]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004216:	4313      	orrs	r3, r2
 8004218:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004222:	2b00      	cmp	r3, #0
 8004224:	d008      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004226:	4b63      	ldr	r3, [pc, #396]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	f023 0220 	bic.w	r2, r3, #32
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	4960      	ldr	r1, [pc, #384]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004234:	4313      	orrs	r3, r2
 8004236:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d008      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004244:	4b5b      	ldr	r3, [pc, #364]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	4958      	ldr	r1, [pc, #352]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004252:	4313      	orrs	r3, r2
 8004254:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b00      	cmp	r3, #0
 8004260:	d008      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004262:	4b54      	ldr	r3, [pc, #336]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	4951      	ldr	r1, [pc, #324]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004270:	4313      	orrs	r3, r2
 8004272:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0310 	and.w	r3, r3, #16
 800427c:	2b00      	cmp	r3, #0
 800427e:	d008      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004280:	4b4c      	ldr	r3, [pc, #304]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	4949      	ldr	r1, [pc, #292]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800428e:	4313      	orrs	r3, r2
 8004290:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800429a:	2b00      	cmp	r3, #0
 800429c:	d008      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800429e:	4b45      	ldr	r3, [pc, #276]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	4942      	ldr	r1, [pc, #264]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d008      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042bc:	4b3d      	ldr	r3, [pc, #244]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c8:	493a      	ldr	r1, [pc, #232]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80042da:	4b36      	ldr	r3, [pc, #216]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042de:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	4933      	ldr	r1, [pc, #204]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d008      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80042f8:	4b2e      	ldr	r3, [pc, #184]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004304:	492b      	ldr	r1, [pc, #172]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004306:	4313      	orrs	r3, r2
 8004308:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d008      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004316:	4b27      	ldr	r3, [pc, #156]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	4924      	ldr	r1, [pc, #144]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004324:	4313      	orrs	r3, r2
 8004326:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004334:	4b1f      	ldr	r3, [pc, #124]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004338:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	491c      	ldr	r1, [pc, #112]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004342:	4313      	orrs	r3, r2
 8004344:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004352:	4b18      	ldr	r3, [pc, #96]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435e:	4915      	ldr	r1, [pc, #84]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004360:	4313      	orrs	r3, r2
 8004362:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d008      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004370:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437c:	490d      	ldr	r1, [pc, #52]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800437e:	4313      	orrs	r3, r2
 8004380:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d008      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800438e:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800439a:	4906      	ldr	r1, [pc, #24]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800439c:	4313      	orrs	r3, r2
 800439e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00c      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80043ac:	4b01      	ldr	r3, [pc, #4]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	e002      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80043b2:	bf00      	nop
 80043b4:	40021000 	.word	0x40021000
 80043b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c0:	490b      	ldr	r1, [pc, #44]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d008      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80043d2:	4b07      	ldr	r3, [pc, #28]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043de:	4904      	ldr	r1, [pc, #16]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3748      	adds	r7, #72	; 0x48
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40021000 	.word	0x40021000

080043f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e01d      	b.n	8004442 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fd fb14 	bl	8001a48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3304      	adds	r3, #4
 8004430:	4619      	mov	r1, r3
 8004432:	4610      	mov	r0, r2
 8004434:	f000 f97c 	bl	8004730 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	4b0c      	ldr	r3, [pc, #48]	; (800449c <HAL_TIM_Base_Start_IT+0x50>)
 800446c:	4013      	ands	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2b06      	cmp	r3, #6
 8004474:	d00b      	beq.n	800448e <HAL_TIM_Base_Start_IT+0x42>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800447c:	d007      	beq.n	800448e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0201 	orr.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	00010007 	.word	0x00010007

080044a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d122      	bne.n	80044fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d11b      	bne.n	80044fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0202 	mvn.w	r2, #2
 80044cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f905 	bl	80046f2 <HAL_TIM_IC_CaptureCallback>
 80044e8:	e005      	b.n	80044f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f8f7 	bl	80046de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f908 	bl	8004706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0304 	and.w	r3, r3, #4
 8004506:	2b04      	cmp	r3, #4
 8004508:	d122      	bne.n	8004550 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b04      	cmp	r3, #4
 8004516:	d11b      	bne.n	8004550 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0204 	mvn.w	r2, #4
 8004520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2202      	movs	r2, #2
 8004526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f8db 	bl	80046f2 <HAL_TIM_IC_CaptureCallback>
 800453c:	e005      	b.n	800454a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f8cd 	bl	80046de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f8de 	bl	8004706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b08      	cmp	r3, #8
 800455c:	d122      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b08      	cmp	r3, #8
 800456a:	d11b      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0208 	mvn.w	r2, #8
 8004574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2204      	movs	r2, #4
 800457a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f8b1 	bl	80046f2 <HAL_TIM_IC_CaptureCallback>
 8004590:	e005      	b.n	800459e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f8a3 	bl	80046de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f8b4 	bl	8004706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f003 0310 	and.w	r3, r3, #16
 80045ae:	2b10      	cmp	r3, #16
 80045b0:	d122      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f003 0310 	and.w	r3, r3, #16
 80045bc:	2b10      	cmp	r3, #16
 80045be:	d11b      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f06f 0210 	mvn.w	r2, #16
 80045c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2208      	movs	r2, #8
 80045ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f887 	bl	80046f2 <HAL_TIM_IC_CaptureCallback>
 80045e4:	e005      	b.n	80045f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f879 	bl	80046de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f88a 	bl	8004706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b01      	cmp	r3, #1
 8004604:	d10e      	bne.n	8004624 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b01      	cmp	r3, #1
 8004612:	d107      	bne.n	8004624 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0201 	mvn.w	r2, #1
 800461c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fc ffe8 	bl	80015f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462e:	2b80      	cmp	r3, #128	; 0x80
 8004630:	d10e      	bne.n	8004650 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463c:	2b80      	cmp	r3, #128	; 0x80
 800463e:	d107      	bne.n	8004650 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f9a4 	bl	8004998 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800465e:	d10e      	bne.n	800467e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466a:	2b80      	cmp	r3, #128	; 0x80
 800466c:	d107      	bne.n	800467e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f997 	bl	80049ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004688:	2b40      	cmp	r3, #64	; 0x40
 800468a:	d10e      	bne.n	80046aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004696:	2b40      	cmp	r3, #64	; 0x40
 8004698:	d107      	bne.n	80046aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f838 	bl	800471a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	d10e      	bne.n	80046d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b20      	cmp	r3, #32
 80046c4:	d107      	bne.n	80046d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f06f 0220 	mvn.w	r2, #32
 80046ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f957 	bl	8004984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046d6:	bf00      	nop
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
	...

08004730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a42      	ldr	r2, [pc, #264]	; (800484c <TIM_Base_SetConfig+0x11c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d013      	beq.n	8004770 <TIM_Base_SetConfig+0x40>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474e:	d00f      	beq.n	8004770 <TIM_Base_SetConfig+0x40>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a3f      	ldr	r2, [pc, #252]	; (8004850 <TIM_Base_SetConfig+0x120>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00b      	beq.n	8004770 <TIM_Base_SetConfig+0x40>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a3e      	ldr	r2, [pc, #248]	; (8004854 <TIM_Base_SetConfig+0x124>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d007      	beq.n	8004770 <TIM_Base_SetConfig+0x40>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a3d      	ldr	r2, [pc, #244]	; (8004858 <TIM_Base_SetConfig+0x128>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d003      	beq.n	8004770 <TIM_Base_SetConfig+0x40>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a3c      	ldr	r2, [pc, #240]	; (800485c <TIM_Base_SetConfig+0x12c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d108      	bne.n	8004782 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a31      	ldr	r2, [pc, #196]	; (800484c <TIM_Base_SetConfig+0x11c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d01f      	beq.n	80047ca <TIM_Base_SetConfig+0x9a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004790:	d01b      	beq.n	80047ca <TIM_Base_SetConfig+0x9a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a2e      	ldr	r2, [pc, #184]	; (8004850 <TIM_Base_SetConfig+0x120>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d017      	beq.n	80047ca <TIM_Base_SetConfig+0x9a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a2d      	ldr	r2, [pc, #180]	; (8004854 <TIM_Base_SetConfig+0x124>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d013      	beq.n	80047ca <TIM_Base_SetConfig+0x9a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a2c      	ldr	r2, [pc, #176]	; (8004858 <TIM_Base_SetConfig+0x128>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00f      	beq.n	80047ca <TIM_Base_SetConfig+0x9a>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a2c      	ldr	r2, [pc, #176]	; (8004860 <TIM_Base_SetConfig+0x130>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d00b      	beq.n	80047ca <TIM_Base_SetConfig+0x9a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a2b      	ldr	r2, [pc, #172]	; (8004864 <TIM_Base_SetConfig+0x134>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d007      	beq.n	80047ca <TIM_Base_SetConfig+0x9a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a2a      	ldr	r2, [pc, #168]	; (8004868 <TIM_Base_SetConfig+0x138>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d003      	beq.n	80047ca <TIM_Base_SetConfig+0x9a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a25      	ldr	r2, [pc, #148]	; (800485c <TIM_Base_SetConfig+0x12c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d108      	bne.n	80047dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a12      	ldr	r2, [pc, #72]	; (800484c <TIM_Base_SetConfig+0x11c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d013      	beq.n	8004830 <TIM_Base_SetConfig+0x100>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a13      	ldr	r2, [pc, #76]	; (8004858 <TIM_Base_SetConfig+0x128>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00f      	beq.n	8004830 <TIM_Base_SetConfig+0x100>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a13      	ldr	r2, [pc, #76]	; (8004860 <TIM_Base_SetConfig+0x130>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d00b      	beq.n	8004830 <TIM_Base_SetConfig+0x100>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a12      	ldr	r2, [pc, #72]	; (8004864 <TIM_Base_SetConfig+0x134>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d007      	beq.n	8004830 <TIM_Base_SetConfig+0x100>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a11      	ldr	r2, [pc, #68]	; (8004868 <TIM_Base_SetConfig+0x138>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d003      	beq.n	8004830 <TIM_Base_SetConfig+0x100>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a0c      	ldr	r2, [pc, #48]	; (800485c <TIM_Base_SetConfig+0x12c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d103      	bne.n	8004838 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	691a      	ldr	r2, [r3, #16]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	615a      	str	r2, [r3, #20]
}
 800483e:	bf00      	nop
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	40012c00 	.word	0x40012c00
 8004850:	40000400 	.word	0x40000400
 8004854:	40000800 	.word	0x40000800
 8004858:	40013400 	.word	0x40013400
 800485c:	40015000 	.word	0x40015000
 8004860:	40014000 	.word	0x40014000
 8004864:	40014400 	.word	0x40014400
 8004868:	40014800 	.word	0x40014800

0800486c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004880:	2302      	movs	r3, #2
 8004882:	e06d      	b.n	8004960 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a30      	ldr	r2, [pc, #192]	; (800496c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d009      	beq.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a2f      	ldr	r2, [pc, #188]	; (8004970 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d004      	beq.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a2d      	ldr	r2, [pc, #180]	; (8004974 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d108      	bne.n	80048d4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1e      	ldr	r2, [pc, #120]	; (800496c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d01d      	beq.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004900:	d018      	beq.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1c      	ldr	r2, [pc, #112]	; (8004978 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d013      	beq.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a1a      	ldr	r2, [pc, #104]	; (800497c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00e      	beq.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a15      	ldr	r2, [pc, #84]	; (8004970 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d009      	beq.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a16      	ldr	r2, [pc, #88]	; (8004980 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a11      	ldr	r2, [pc, #68]	; (8004974 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d10c      	bne.n	800494e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800493a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	4313      	orrs	r3, r2
 8004944:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	40012c00 	.word	0x40012c00
 8004970:	40013400 	.word	0x40013400
 8004974:	40015000 	.word	0x40015000
 8004978:	40000400 	.word	0x40000400
 800497c:	40000800 	.word	0x40000800
 8004980:	40014000 	.word	0x40014000

08004984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e040      	b.n	8004a54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d106      	bne.n	80049e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7fd f856 	bl	8001a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2224      	movs	r2, #36	; 0x24
 80049ec:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0201 	bic.w	r2, r2, #1
 80049fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f8c0 	bl	8004b84 <UART_SetConfig>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e022      	b.n	8004a54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 face 	bl	8004fb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 fb55 	bl	80050fc <UART_CheckIdleState>
 8004a52:	4603      	mov	r3, r0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08a      	sub	sp, #40	; 0x28
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	603b      	str	r3, [r7, #0]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a70:	2b20      	cmp	r3, #32
 8004a72:	f040 8081 	bne.w	8004b78 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d002      	beq.n	8004a82 <HAL_UART_Transmit+0x26>
 8004a7c:	88fb      	ldrh	r3, [r7, #6]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e079      	b.n	8004b7a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d101      	bne.n	8004a94 <HAL_UART_Transmit+0x38>
 8004a90:	2302      	movs	r3, #2
 8004a92:	e072      	b.n	8004b7a <HAL_UART_Transmit+0x11e>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2221      	movs	r2, #33	; 0x21
 8004aa6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004aa8:	f7fd f908 	bl	8001cbc <HAL_GetTick>
 8004aac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	88fa      	ldrh	r2, [r7, #6]
 8004ab2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	88fa      	ldrh	r2, [r7, #6]
 8004aba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac6:	d108      	bne.n	8004ada <HAL_UART_Transmit+0x7e>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d104      	bne.n	8004ada <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	61bb      	str	r3, [r7, #24]
 8004ad8:	e003      	b.n	8004ae2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ae2:	e02d      	b.n	8004b40 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	2200      	movs	r2, #0
 8004aec:	2180      	movs	r1, #128	; 0x80
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 fb49 	bl	8005186 <UART_WaitOnFlagUntilTimeout>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e03d      	b.n	8004b7a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10b      	bne.n	8004b1c <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	881a      	ldrh	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b10:	b292      	uxth	r2, r2
 8004b12:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	3302      	adds	r3, #2
 8004b18:	61bb      	str	r3, [r7, #24]
 8004b1a:	e008      	b.n	8004b2e <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	781a      	ldrb	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	b292      	uxth	r2, r2
 8004b26:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1cb      	bne.n	8004ae4 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	2200      	movs	r2, #0
 8004b54:	2140      	movs	r1, #64	; 0x40
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 fb15 	bl	8005186 <UART_WaitOnFlagUntilTimeout>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e009      	b.n	8004b7a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	e000      	b.n	8004b7a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004b78:	2302      	movs	r3, #2
  }
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3720      	adds	r7, #32
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b088      	sub	sp, #32
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b90:	2300      	movs	r3, #0
 8004b92:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	4bac      	ldr	r3, [pc, #688]	; (8004e64 <UART_SetConfig+0x2e0>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6812      	ldr	r2, [r2, #0]
 8004bba:	6939      	ldr	r1, [r7, #16]
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a9a      	ldr	r2, [pc, #616]	; (8004e68 <UART_SetConfig+0x2e4>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d121      	bne.n	8004c48 <UART_SetConfig+0xc4>
 8004c04:	4b99      	ldr	r3, [pc, #612]	; (8004e6c <UART_SetConfig+0x2e8>)
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d817      	bhi.n	8004c40 <UART_SetConfig+0xbc>
 8004c10:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <UART_SetConfig+0x94>)
 8004c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c16:	bf00      	nop
 8004c18:	08004c29 	.word	0x08004c29
 8004c1c:	08004c35 	.word	0x08004c35
 8004c20:	08004c3b 	.word	0x08004c3b
 8004c24:	08004c2f 	.word	0x08004c2f
 8004c28:	2301      	movs	r3, #1
 8004c2a:	77fb      	strb	r3, [r7, #31]
 8004c2c:	e0b2      	b.n	8004d94 <UART_SetConfig+0x210>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	77fb      	strb	r3, [r7, #31]
 8004c32:	e0af      	b.n	8004d94 <UART_SetConfig+0x210>
 8004c34:	2304      	movs	r3, #4
 8004c36:	77fb      	strb	r3, [r7, #31]
 8004c38:	e0ac      	b.n	8004d94 <UART_SetConfig+0x210>
 8004c3a:	2308      	movs	r3, #8
 8004c3c:	77fb      	strb	r3, [r7, #31]
 8004c3e:	e0a9      	b.n	8004d94 <UART_SetConfig+0x210>
 8004c40:	2310      	movs	r3, #16
 8004c42:	77fb      	strb	r3, [r7, #31]
 8004c44:	bf00      	nop
 8004c46:	e0a5      	b.n	8004d94 <UART_SetConfig+0x210>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a88      	ldr	r2, [pc, #544]	; (8004e70 <UART_SetConfig+0x2ec>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d123      	bne.n	8004c9a <UART_SetConfig+0x116>
 8004c52:	4b86      	ldr	r3, [pc, #536]	; (8004e6c <UART_SetConfig+0x2e8>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c5e:	d012      	beq.n	8004c86 <UART_SetConfig+0x102>
 8004c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c64:	d802      	bhi.n	8004c6c <UART_SetConfig+0xe8>
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d007      	beq.n	8004c7a <UART_SetConfig+0xf6>
 8004c6a:	e012      	b.n	8004c92 <UART_SetConfig+0x10e>
 8004c6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c70:	d00c      	beq.n	8004c8c <UART_SetConfig+0x108>
 8004c72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c76:	d003      	beq.n	8004c80 <UART_SetConfig+0xfc>
 8004c78:	e00b      	b.n	8004c92 <UART_SetConfig+0x10e>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e089      	b.n	8004d94 <UART_SetConfig+0x210>
 8004c80:	2302      	movs	r3, #2
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e086      	b.n	8004d94 <UART_SetConfig+0x210>
 8004c86:	2304      	movs	r3, #4
 8004c88:	77fb      	strb	r3, [r7, #31]
 8004c8a:	e083      	b.n	8004d94 <UART_SetConfig+0x210>
 8004c8c:	2308      	movs	r3, #8
 8004c8e:	77fb      	strb	r3, [r7, #31]
 8004c90:	e080      	b.n	8004d94 <UART_SetConfig+0x210>
 8004c92:	2310      	movs	r3, #16
 8004c94:	77fb      	strb	r3, [r7, #31]
 8004c96:	bf00      	nop
 8004c98:	e07c      	b.n	8004d94 <UART_SetConfig+0x210>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a75      	ldr	r2, [pc, #468]	; (8004e74 <UART_SetConfig+0x2f0>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d123      	bne.n	8004cec <UART_SetConfig+0x168>
 8004ca4:	4b71      	ldr	r3, [pc, #452]	; (8004e6c <UART_SetConfig+0x2e8>)
 8004ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004cac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004cb0:	d012      	beq.n	8004cd8 <UART_SetConfig+0x154>
 8004cb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004cb6:	d802      	bhi.n	8004cbe <UART_SetConfig+0x13a>
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d007      	beq.n	8004ccc <UART_SetConfig+0x148>
 8004cbc:	e012      	b.n	8004ce4 <UART_SetConfig+0x160>
 8004cbe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004cc2:	d00c      	beq.n	8004cde <UART_SetConfig+0x15a>
 8004cc4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004cc8:	d003      	beq.n	8004cd2 <UART_SetConfig+0x14e>
 8004cca:	e00b      	b.n	8004ce4 <UART_SetConfig+0x160>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	77fb      	strb	r3, [r7, #31]
 8004cd0:	e060      	b.n	8004d94 <UART_SetConfig+0x210>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	77fb      	strb	r3, [r7, #31]
 8004cd6:	e05d      	b.n	8004d94 <UART_SetConfig+0x210>
 8004cd8:	2304      	movs	r3, #4
 8004cda:	77fb      	strb	r3, [r7, #31]
 8004cdc:	e05a      	b.n	8004d94 <UART_SetConfig+0x210>
 8004cde:	2308      	movs	r3, #8
 8004ce0:	77fb      	strb	r3, [r7, #31]
 8004ce2:	e057      	b.n	8004d94 <UART_SetConfig+0x210>
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	77fb      	strb	r3, [r7, #31]
 8004ce8:	bf00      	nop
 8004cea:	e053      	b.n	8004d94 <UART_SetConfig+0x210>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a61      	ldr	r2, [pc, #388]	; (8004e78 <UART_SetConfig+0x2f4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d123      	bne.n	8004d3e <UART_SetConfig+0x1ba>
 8004cf6:	4b5d      	ldr	r3, [pc, #372]	; (8004e6c <UART_SetConfig+0x2e8>)
 8004cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004cfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d02:	d012      	beq.n	8004d2a <UART_SetConfig+0x1a6>
 8004d04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d08:	d802      	bhi.n	8004d10 <UART_SetConfig+0x18c>
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d007      	beq.n	8004d1e <UART_SetConfig+0x19a>
 8004d0e:	e012      	b.n	8004d36 <UART_SetConfig+0x1b2>
 8004d10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d14:	d00c      	beq.n	8004d30 <UART_SetConfig+0x1ac>
 8004d16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d1a:	d003      	beq.n	8004d24 <UART_SetConfig+0x1a0>
 8004d1c:	e00b      	b.n	8004d36 <UART_SetConfig+0x1b2>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	77fb      	strb	r3, [r7, #31]
 8004d22:	e037      	b.n	8004d94 <UART_SetConfig+0x210>
 8004d24:	2302      	movs	r3, #2
 8004d26:	77fb      	strb	r3, [r7, #31]
 8004d28:	e034      	b.n	8004d94 <UART_SetConfig+0x210>
 8004d2a:	2304      	movs	r3, #4
 8004d2c:	77fb      	strb	r3, [r7, #31]
 8004d2e:	e031      	b.n	8004d94 <UART_SetConfig+0x210>
 8004d30:	2308      	movs	r3, #8
 8004d32:	77fb      	strb	r3, [r7, #31]
 8004d34:	e02e      	b.n	8004d94 <UART_SetConfig+0x210>
 8004d36:	2310      	movs	r3, #16
 8004d38:	77fb      	strb	r3, [r7, #31]
 8004d3a:	bf00      	nop
 8004d3c:	e02a      	b.n	8004d94 <UART_SetConfig+0x210>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a4e      	ldr	r2, [pc, #312]	; (8004e7c <UART_SetConfig+0x2f8>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d123      	bne.n	8004d90 <UART_SetConfig+0x20c>
 8004d48:	4b48      	ldr	r3, [pc, #288]	; (8004e6c <UART_SetConfig+0x2e8>)
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d54:	d012      	beq.n	8004d7c <UART_SetConfig+0x1f8>
 8004d56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d5a:	d802      	bhi.n	8004d62 <UART_SetConfig+0x1de>
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d007      	beq.n	8004d70 <UART_SetConfig+0x1ec>
 8004d60:	e012      	b.n	8004d88 <UART_SetConfig+0x204>
 8004d62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d66:	d00c      	beq.n	8004d82 <UART_SetConfig+0x1fe>
 8004d68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d6c:	d003      	beq.n	8004d76 <UART_SetConfig+0x1f2>
 8004d6e:	e00b      	b.n	8004d88 <UART_SetConfig+0x204>
 8004d70:	2300      	movs	r3, #0
 8004d72:	77fb      	strb	r3, [r7, #31]
 8004d74:	e00e      	b.n	8004d94 <UART_SetConfig+0x210>
 8004d76:	2302      	movs	r3, #2
 8004d78:	77fb      	strb	r3, [r7, #31]
 8004d7a:	e00b      	b.n	8004d94 <UART_SetConfig+0x210>
 8004d7c:	2304      	movs	r3, #4
 8004d7e:	77fb      	strb	r3, [r7, #31]
 8004d80:	e008      	b.n	8004d94 <UART_SetConfig+0x210>
 8004d82:	2308      	movs	r3, #8
 8004d84:	77fb      	strb	r3, [r7, #31]
 8004d86:	e005      	b.n	8004d94 <UART_SetConfig+0x210>
 8004d88:	2310      	movs	r3, #16
 8004d8a:	77fb      	strb	r3, [r7, #31]
 8004d8c:	bf00      	nop
 8004d8e:	e001      	b.n	8004d94 <UART_SetConfig+0x210>
 8004d90:	2310      	movs	r3, #16
 8004d92:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d9c:	f040 8090 	bne.w	8004ec0 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8004da0:	7ffb      	ldrb	r3, [r7, #31]
 8004da2:	2b08      	cmp	r3, #8
 8004da4:	d86c      	bhi.n	8004e80 <UART_SetConfig+0x2fc>
 8004da6:	a201      	add	r2, pc, #4	; (adr r2, 8004dac <UART_SetConfig+0x228>)
 8004da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dac:	08004dd1 	.word	0x08004dd1
 8004db0:	08004df1 	.word	0x08004df1
 8004db4:	08004e11 	.word	0x08004e11
 8004db8:	08004e81 	.word	0x08004e81
 8004dbc:	08004e2d 	.word	0x08004e2d
 8004dc0:	08004e81 	.word	0x08004e81
 8004dc4:	08004e81 	.word	0x08004e81
 8004dc8:	08004e81 	.word	0x08004e81
 8004dcc:	08004e4d 	.word	0x08004e4d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dd0:	f7ff f8ae 	bl	8003f30 <HAL_RCC_GetPCLK1Freq>
 8004dd4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	005a      	lsls	r2, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	085b      	lsrs	r3, r3, #1
 8004de0:	441a      	add	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	61bb      	str	r3, [r7, #24]
        break;
 8004dee:	e04a      	b.n	8004e86 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004df0:	f7ff f8c0 	bl	8003f74 <HAL_RCC_GetPCLK2Freq>
 8004df4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	005a      	lsls	r2, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	085b      	lsrs	r3, r3, #1
 8004e00:	441a      	add	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	61bb      	str	r3, [r7, #24]
        break;
 8004e0e:	e03a      	b.n	8004e86 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	085b      	lsrs	r3, r3, #1
 8004e16:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004e1a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6852      	ldr	r2, [r2, #4]
 8004e22:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	61bb      	str	r3, [r7, #24]
        break;
 8004e2a:	e02c      	b.n	8004e86 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e2c:	f7ff f80a 	bl	8003e44 <HAL_RCC_GetSysClockFreq>
 8004e30:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	005a      	lsls	r2, r3, #1
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	085b      	lsrs	r3, r3, #1
 8004e3c:	441a      	add	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	61bb      	str	r3, [r7, #24]
        break;
 8004e4a:	e01c      	b.n	8004e86 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	085b      	lsrs	r3, r3, #1
 8004e52:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	61bb      	str	r3, [r7, #24]
        break;
 8004e62:	e010      	b.n	8004e86 <UART_SetConfig+0x302>
 8004e64:	efff69f3 	.word	0xefff69f3
 8004e68:	40013800 	.word	0x40013800
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	40004400 	.word	0x40004400
 8004e74:	40004800 	.word	0x40004800
 8004e78:	40004c00 	.word	0x40004c00
 8004e7c:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	75fb      	strb	r3, [r7, #23]
        break;
 8004e84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	2b0f      	cmp	r3, #15
 8004e8a:	d916      	bls.n	8004eba <UART_SetConfig+0x336>
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e92:	d212      	bcs.n	8004eba <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	f023 030f 	bic.w	r3, r3, #15
 8004e9c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	085b      	lsrs	r3, r3, #1
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	897b      	ldrh	r3, [r7, #10]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	897a      	ldrh	r2, [r7, #10]
 8004eb6:	60da      	str	r2, [r3, #12]
 8004eb8:	e072      	b.n	8004fa0 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	75fb      	strb	r3, [r7, #23]
 8004ebe:	e06f      	b.n	8004fa0 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8004ec0:	7ffb      	ldrb	r3, [r7, #31]
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d85b      	bhi.n	8004f7e <UART_SetConfig+0x3fa>
 8004ec6:	a201      	add	r2, pc, #4	; (adr r2, 8004ecc <UART_SetConfig+0x348>)
 8004ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ecc:	08004ef1 	.word	0x08004ef1
 8004ed0:	08004f0f 	.word	0x08004f0f
 8004ed4:	08004f2d 	.word	0x08004f2d
 8004ed8:	08004f7f 	.word	0x08004f7f
 8004edc:	08004f49 	.word	0x08004f49
 8004ee0:	08004f7f 	.word	0x08004f7f
 8004ee4:	08004f7f 	.word	0x08004f7f
 8004ee8:	08004f7f 	.word	0x08004f7f
 8004eec:	08004f67 	.word	0x08004f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ef0:	f7ff f81e 	bl	8003f30 <HAL_RCC_GetPCLK1Freq>
 8004ef4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	085a      	lsrs	r2, r3, #1
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	441a      	add	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	61bb      	str	r3, [r7, #24]
        break;
 8004f0c:	e03a      	b.n	8004f84 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f0e:	f7ff f831 	bl	8003f74 <HAL_RCC_GetPCLK2Freq>
 8004f12:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	085a      	lsrs	r2, r3, #1
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	441a      	add	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	61bb      	str	r3, [r7, #24]
        break;
 8004f2a:	e02b      	b.n	8004f84 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	085b      	lsrs	r3, r3, #1
 8004f32:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004f36:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6852      	ldr	r2, [r2, #4]
 8004f3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	61bb      	str	r3, [r7, #24]
        break;
 8004f46:	e01d      	b.n	8004f84 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f48:	f7fe ff7c 	bl	8003e44 <HAL_RCC_GetSysClockFreq>
 8004f4c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	085a      	lsrs	r2, r3, #1
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	441a      	add	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	61bb      	str	r3, [r7, #24]
        break;
 8004f64:	e00e      	b.n	8004f84 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	085b      	lsrs	r3, r3, #1
 8004f6c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	61bb      	str	r3, [r7, #24]
        break;
 8004f7c:	e002      	b.n	8004f84 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	75fb      	strb	r3, [r7, #23]
        break;
 8004f82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	2b0f      	cmp	r3, #15
 8004f88:	d908      	bls.n	8004f9c <UART_SetConfig+0x418>
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f90:	d204      	bcs.n	8004f9c <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	60da      	str	r2, [r3, #12]
 8004f9a:	e001      	b.n	8004fa0 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3720      	adds	r7, #32
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop

08004fb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00a      	beq.n	8004fe2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00a      	beq.n	8005026 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	f003 0310 	and.w	r3, r3, #16
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00a      	beq.n	800506a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01a      	beq.n	80050ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050b6:	d10a      	bne.n	80050ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	605a      	str	r2, [r3, #4]
  }
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af02      	add	r7, sp, #8
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800510a:	f7fc fdd7 	bl	8001cbc <HAL_GetTick>
 800510e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b08      	cmp	r3, #8
 800511c:	d10e      	bne.n	800513c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800511e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f82a 	bl	8005186 <UART_WaitOnFlagUntilTimeout>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e020      	b.n	800517e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	2b04      	cmp	r3, #4
 8005148:	d10e      	bne.n	8005168 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800514a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f814 	bl	8005186 <UART_WaitOnFlagUntilTimeout>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e00a      	b.n	800517e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2220      	movs	r2, #32
 800516c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2220      	movs	r2, #32
 8005172:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	603b      	str	r3, [r7, #0]
 8005192:	4613      	mov	r3, r2
 8005194:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005196:	e05d      	b.n	8005254 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519e:	d059      	beq.n	8005254 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a0:	f7fc fd8c 	bl	8001cbc <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d302      	bcc.n	80051b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d11b      	bne.n	80051ee <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051c4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 0201 	bic.w	r2, r2, #1
 80051d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2220      	movs	r2, #32
 80051da:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2220      	movs	r2, #32
 80051e0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e042      	b.n	8005274 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d02b      	beq.n	8005254 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800520a:	d123      	bne.n	8005254 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005214:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005224:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0201 	bic.w	r2, r2, #1
 8005234:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2220      	movs	r2, #32
 800523a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2220      	movs	r2, #32
 8005240:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2220      	movs	r2, #32
 8005246:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e00f      	b.n	8005274 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69da      	ldr	r2, [r3, #28]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	4013      	ands	r3, r2
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	429a      	cmp	r2, r3
 8005262:	bf0c      	ite	eq
 8005264:	2301      	moveq	r3, #1
 8005266:	2300      	movne	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	461a      	mov	r2, r3
 800526c:	79fb      	ldrb	r3, [r7, #7]
 800526e:	429a      	cmp	r2, r3
 8005270:	d092      	beq.n	8005198 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <__errno>:
 800527c:	4b01      	ldr	r3, [pc, #4]	; (8005284 <__errno+0x8>)
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	20000010 	.word	0x20000010

08005288 <__libc_init_array>:
 8005288:	b570      	push	{r4, r5, r6, lr}
 800528a:	4e0d      	ldr	r6, [pc, #52]	; (80052c0 <__libc_init_array+0x38>)
 800528c:	4c0d      	ldr	r4, [pc, #52]	; (80052c4 <__libc_init_array+0x3c>)
 800528e:	1ba4      	subs	r4, r4, r6
 8005290:	10a4      	asrs	r4, r4, #2
 8005292:	2500      	movs	r5, #0
 8005294:	42a5      	cmp	r5, r4
 8005296:	d109      	bne.n	80052ac <__libc_init_array+0x24>
 8005298:	4e0b      	ldr	r6, [pc, #44]	; (80052c8 <__libc_init_array+0x40>)
 800529a:	4c0c      	ldr	r4, [pc, #48]	; (80052cc <__libc_init_array+0x44>)
 800529c:	f000 f938 	bl	8005510 <_init>
 80052a0:	1ba4      	subs	r4, r4, r6
 80052a2:	10a4      	asrs	r4, r4, #2
 80052a4:	2500      	movs	r5, #0
 80052a6:	42a5      	cmp	r5, r4
 80052a8:	d105      	bne.n	80052b6 <__libc_init_array+0x2e>
 80052aa:	bd70      	pop	{r4, r5, r6, pc}
 80052ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052b0:	4798      	blx	r3
 80052b2:	3501      	adds	r5, #1
 80052b4:	e7ee      	b.n	8005294 <__libc_init_array+0xc>
 80052b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052ba:	4798      	blx	r3
 80052bc:	3501      	adds	r5, #1
 80052be:	e7f2      	b.n	80052a6 <__libc_init_array+0x1e>
 80052c0:	08005568 	.word	0x08005568
 80052c4:	08005568 	.word	0x08005568
 80052c8:	08005568 	.word	0x08005568
 80052cc:	0800556c 	.word	0x0800556c

080052d0 <memcpy>:
 80052d0:	b510      	push	{r4, lr}
 80052d2:	1e43      	subs	r3, r0, #1
 80052d4:	440a      	add	r2, r1
 80052d6:	4291      	cmp	r1, r2
 80052d8:	d100      	bne.n	80052dc <memcpy+0xc>
 80052da:	bd10      	pop	{r4, pc}
 80052dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052e4:	e7f7      	b.n	80052d6 <memcpy+0x6>

080052e6 <memset>:
 80052e6:	4402      	add	r2, r0
 80052e8:	4603      	mov	r3, r0
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d100      	bne.n	80052f0 <memset+0xa>
 80052ee:	4770      	bx	lr
 80052f0:	f803 1b01 	strb.w	r1, [r3], #1
 80052f4:	e7f9      	b.n	80052ea <memset+0x4>
	...

080052f8 <sqrt>:
 80052f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052fc:	ed2d 8b02 	vpush	{d8}
 8005300:	b08b      	sub	sp, #44	; 0x2c
 8005302:	ec55 4b10 	vmov	r4, r5, d0
 8005306:	f000 f851 	bl	80053ac <__ieee754_sqrt>
 800530a:	4b26      	ldr	r3, [pc, #152]	; (80053a4 <sqrt+0xac>)
 800530c:	eeb0 8a40 	vmov.f32	s16, s0
 8005310:	eef0 8a60 	vmov.f32	s17, s1
 8005314:	f993 6000 	ldrsb.w	r6, [r3]
 8005318:	1c73      	adds	r3, r6, #1
 800531a:	d02a      	beq.n	8005372 <sqrt+0x7a>
 800531c:	4622      	mov	r2, r4
 800531e:	462b      	mov	r3, r5
 8005320:	4620      	mov	r0, r4
 8005322:	4629      	mov	r1, r5
 8005324:	f7fb fbae 	bl	8000a84 <__aeabi_dcmpun>
 8005328:	4607      	mov	r7, r0
 800532a:	bb10      	cbnz	r0, 8005372 <sqrt+0x7a>
 800532c:	f04f 0800 	mov.w	r8, #0
 8005330:	f04f 0900 	mov.w	r9, #0
 8005334:	4642      	mov	r2, r8
 8005336:	464b      	mov	r3, r9
 8005338:	4620      	mov	r0, r4
 800533a:	4629      	mov	r1, r5
 800533c:	f7fb fb7a 	bl	8000a34 <__aeabi_dcmplt>
 8005340:	b1b8      	cbz	r0, 8005372 <sqrt+0x7a>
 8005342:	2301      	movs	r3, #1
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	4b18      	ldr	r3, [pc, #96]	; (80053a8 <sqrt+0xb0>)
 8005348:	9301      	str	r3, [sp, #4]
 800534a:	9708      	str	r7, [sp, #32]
 800534c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005350:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005354:	b9b6      	cbnz	r6, 8005384 <sqrt+0x8c>
 8005356:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800535a:	4668      	mov	r0, sp
 800535c:	f000 f8d6 	bl	800550c <matherr>
 8005360:	b1d0      	cbz	r0, 8005398 <sqrt+0xa0>
 8005362:	9b08      	ldr	r3, [sp, #32]
 8005364:	b11b      	cbz	r3, 800536e <sqrt+0x76>
 8005366:	f7ff ff89 	bl	800527c <__errno>
 800536a:	9b08      	ldr	r3, [sp, #32]
 800536c:	6003      	str	r3, [r0, #0]
 800536e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8005372:	eeb0 0a48 	vmov.f32	s0, s16
 8005376:	eef0 0a68 	vmov.f32	s1, s17
 800537a:	b00b      	add	sp, #44	; 0x2c
 800537c:	ecbd 8b02 	vpop	{d8}
 8005380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005384:	4642      	mov	r2, r8
 8005386:	464b      	mov	r3, r9
 8005388:	4640      	mov	r0, r8
 800538a:	4649      	mov	r1, r9
 800538c:	f7fb fa0a 	bl	80007a4 <__aeabi_ddiv>
 8005390:	2e02      	cmp	r6, #2
 8005392:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005396:	d1e0      	bne.n	800535a <sqrt+0x62>
 8005398:	f7ff ff70 	bl	800527c <__errno>
 800539c:	2321      	movs	r3, #33	; 0x21
 800539e:	6003      	str	r3, [r0, #0]
 80053a0:	e7df      	b.n	8005362 <sqrt+0x6a>
 80053a2:	bf00      	nop
 80053a4:	20000074 	.word	0x20000074
 80053a8:	08005560 	.word	0x08005560

080053ac <__ieee754_sqrt>:
 80053ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053b0:	4955      	ldr	r1, [pc, #340]	; (8005508 <__ieee754_sqrt+0x15c>)
 80053b2:	ec55 4b10 	vmov	r4, r5, d0
 80053b6:	43a9      	bics	r1, r5
 80053b8:	462b      	mov	r3, r5
 80053ba:	462a      	mov	r2, r5
 80053bc:	d112      	bne.n	80053e4 <__ieee754_sqrt+0x38>
 80053be:	ee10 2a10 	vmov	r2, s0
 80053c2:	ee10 0a10 	vmov	r0, s0
 80053c6:	4629      	mov	r1, r5
 80053c8:	f7fb f8c2 	bl	8000550 <__aeabi_dmul>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4620      	mov	r0, r4
 80053d2:	4629      	mov	r1, r5
 80053d4:	f7fa ff06 	bl	80001e4 <__adddf3>
 80053d8:	4604      	mov	r4, r0
 80053da:	460d      	mov	r5, r1
 80053dc:	ec45 4b10 	vmov	d0, r4, r5
 80053e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053e4:	2d00      	cmp	r5, #0
 80053e6:	ee10 0a10 	vmov	r0, s0
 80053ea:	4621      	mov	r1, r4
 80053ec:	dc0f      	bgt.n	800540e <__ieee754_sqrt+0x62>
 80053ee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80053f2:	4330      	orrs	r0, r6
 80053f4:	d0f2      	beq.n	80053dc <__ieee754_sqrt+0x30>
 80053f6:	b155      	cbz	r5, 800540e <__ieee754_sqrt+0x62>
 80053f8:	ee10 2a10 	vmov	r2, s0
 80053fc:	4620      	mov	r0, r4
 80053fe:	4629      	mov	r1, r5
 8005400:	f7fa feee 	bl	80001e0 <__aeabi_dsub>
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	f7fb f9cc 	bl	80007a4 <__aeabi_ddiv>
 800540c:	e7e4      	b.n	80053d8 <__ieee754_sqrt+0x2c>
 800540e:	151b      	asrs	r3, r3, #20
 8005410:	d073      	beq.n	80054fa <__ieee754_sqrt+0x14e>
 8005412:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005416:	07dd      	lsls	r5, r3, #31
 8005418:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800541c:	bf48      	it	mi
 800541e:	0fc8      	lsrmi	r0, r1, #31
 8005420:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005424:	bf44      	itt	mi
 8005426:	0049      	lslmi	r1, r1, #1
 8005428:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800542c:	2500      	movs	r5, #0
 800542e:	1058      	asrs	r0, r3, #1
 8005430:	0fcb      	lsrs	r3, r1, #31
 8005432:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8005436:	0049      	lsls	r1, r1, #1
 8005438:	2316      	movs	r3, #22
 800543a:	462c      	mov	r4, r5
 800543c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005440:	19a7      	adds	r7, r4, r6
 8005442:	4297      	cmp	r7, r2
 8005444:	bfde      	ittt	le
 8005446:	19bc      	addle	r4, r7, r6
 8005448:	1bd2      	suble	r2, r2, r7
 800544a:	19ad      	addle	r5, r5, r6
 800544c:	0fcf      	lsrs	r7, r1, #31
 800544e:	3b01      	subs	r3, #1
 8005450:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8005454:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005458:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800545c:	d1f0      	bne.n	8005440 <__ieee754_sqrt+0x94>
 800545e:	f04f 0c20 	mov.w	ip, #32
 8005462:	469e      	mov	lr, r3
 8005464:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005468:	42a2      	cmp	r2, r4
 800546a:	eb06 070e 	add.w	r7, r6, lr
 800546e:	dc02      	bgt.n	8005476 <__ieee754_sqrt+0xca>
 8005470:	d112      	bne.n	8005498 <__ieee754_sqrt+0xec>
 8005472:	428f      	cmp	r7, r1
 8005474:	d810      	bhi.n	8005498 <__ieee754_sqrt+0xec>
 8005476:	2f00      	cmp	r7, #0
 8005478:	eb07 0e06 	add.w	lr, r7, r6
 800547c:	da42      	bge.n	8005504 <__ieee754_sqrt+0x158>
 800547e:	f1be 0f00 	cmp.w	lr, #0
 8005482:	db3f      	blt.n	8005504 <__ieee754_sqrt+0x158>
 8005484:	f104 0801 	add.w	r8, r4, #1
 8005488:	1b12      	subs	r2, r2, r4
 800548a:	428f      	cmp	r7, r1
 800548c:	bf88      	it	hi
 800548e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005492:	1bc9      	subs	r1, r1, r7
 8005494:	4433      	add	r3, r6
 8005496:	4644      	mov	r4, r8
 8005498:	0052      	lsls	r2, r2, #1
 800549a:	f1bc 0c01 	subs.w	ip, ip, #1
 800549e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80054a2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80054a6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80054aa:	d1dd      	bne.n	8005468 <__ieee754_sqrt+0xbc>
 80054ac:	430a      	orrs	r2, r1
 80054ae:	d006      	beq.n	80054be <__ieee754_sqrt+0x112>
 80054b0:	1c5c      	adds	r4, r3, #1
 80054b2:	bf13      	iteet	ne
 80054b4:	3301      	addne	r3, #1
 80054b6:	3501      	addeq	r5, #1
 80054b8:	4663      	moveq	r3, ip
 80054ba:	f023 0301 	bicne.w	r3, r3, #1
 80054be:	106a      	asrs	r2, r5, #1
 80054c0:	085b      	lsrs	r3, r3, #1
 80054c2:	07e9      	lsls	r1, r5, #31
 80054c4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80054c8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80054cc:	bf48      	it	mi
 80054ce:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80054d2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80054d6:	461c      	mov	r4, r3
 80054d8:	e780      	b.n	80053dc <__ieee754_sqrt+0x30>
 80054da:	0aca      	lsrs	r2, r1, #11
 80054dc:	3815      	subs	r0, #21
 80054de:	0549      	lsls	r1, r1, #21
 80054e0:	2a00      	cmp	r2, #0
 80054e2:	d0fa      	beq.n	80054da <__ieee754_sqrt+0x12e>
 80054e4:	02d6      	lsls	r6, r2, #11
 80054e6:	d50a      	bpl.n	80054fe <__ieee754_sqrt+0x152>
 80054e8:	f1c3 0420 	rsb	r4, r3, #32
 80054ec:	fa21 f404 	lsr.w	r4, r1, r4
 80054f0:	1e5d      	subs	r5, r3, #1
 80054f2:	4099      	lsls	r1, r3
 80054f4:	4322      	orrs	r2, r4
 80054f6:	1b43      	subs	r3, r0, r5
 80054f8:	e78b      	b.n	8005412 <__ieee754_sqrt+0x66>
 80054fa:	4618      	mov	r0, r3
 80054fc:	e7f0      	b.n	80054e0 <__ieee754_sqrt+0x134>
 80054fe:	0052      	lsls	r2, r2, #1
 8005500:	3301      	adds	r3, #1
 8005502:	e7ef      	b.n	80054e4 <__ieee754_sqrt+0x138>
 8005504:	46a0      	mov	r8, r4
 8005506:	e7bf      	b.n	8005488 <__ieee754_sqrt+0xdc>
 8005508:	7ff00000 	.word	0x7ff00000

0800550c <matherr>:
 800550c:	2000      	movs	r0, #0
 800550e:	4770      	bx	lr

08005510 <_init>:
 8005510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005512:	bf00      	nop
 8005514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005516:	bc08      	pop	{r3}
 8005518:	469e      	mov	lr, r3
 800551a:	4770      	bx	lr

0800551c <_fini>:
 800551c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551e:	bf00      	nop
 8005520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005522:	bc08      	pop	{r3}
 8005524:	469e      	mov	lr, r3
 8005526:	4770      	bx	lr
